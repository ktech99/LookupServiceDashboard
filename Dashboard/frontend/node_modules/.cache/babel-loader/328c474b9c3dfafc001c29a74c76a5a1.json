{"ast":null,"code":"'use strict';\n\nconst from = require('from2');\n\nconst pIsPromise = require('p-is-promise');\n\nconst intoStream = input => {\n  if (Array.isArray(input)) {\n    input = input.slice();\n  }\n\n  let promise;\n  let iterator;\n  prepare(input);\n\n  function prepare(value) {\n    input = value;\n\n    if (input instanceof ArrayBuffer || ArrayBuffer.isView(input) && !Buffer.isBuffer(input)) {\n      input = Buffer.from(input);\n    }\n\n    promise = pIsPromise(input) ? input : null; // We don't iterate on strings and buffers since slicing them is ~7x faster\n\n    const shouldIterate = !promise && input[Symbol.iterator] && typeof input !== 'string' && !Buffer.isBuffer(input);\n    iterator = shouldIterate ? input[Symbol.iterator]() : null;\n  }\n\n  return from(function reader(size, callback) {\n    if (promise) {\n      (async () => {\n        try {\n          await prepare((await promise));\n          reader.call(this, size, callback);\n        } catch (error) {\n          callback(error);\n        }\n      })();\n\n      return;\n    }\n\n    if (iterator) {\n      const object = iterator.next();\n      setImmediate(callback, null, object.done ? null : object.value);\n      return;\n    }\n\n    if (input.length === 0) {\n      setImmediate(callback, null, null);\n      return;\n    }\n\n    const chunk = input.slice(0, size);\n    input = input.slice(size);\n    setImmediate(callback, null, chunk);\n  });\n};\n\nmodule.exports = intoStream; // TODO: Remove this for the next major release\n\nmodule.exports.default = intoStream;\n\nmodule.exports.object = input => {\n  if (Array.isArray(input)) {\n    input = input.slice();\n  }\n\n  let promise;\n  let iterator;\n  prepare(input);\n\n  function prepare(value) {\n    input = value;\n    promise = pIsPromise(input) ? input : null;\n    iterator = !promise && input[Symbol.iterator] ? input[Symbol.iterator]() : null;\n  }\n\n  return from.obj(function reader(size, callback) {\n    if (promise) {\n      (async () => {\n        try {\n          await prepare((await promise));\n          reader.call(this, size, callback);\n        } catch (error) {\n          callback(error);\n        }\n      })();\n\n      return;\n    }\n\n    if (iterator) {\n      const object = iterator.next();\n      setImmediate(callback, null, object.done ? null : object.value);\n      return;\n    }\n\n    this.push(input);\n    setImmediate(callback, null, null);\n  });\n};","map":null,"metadata":{},"sourceType":"script"}