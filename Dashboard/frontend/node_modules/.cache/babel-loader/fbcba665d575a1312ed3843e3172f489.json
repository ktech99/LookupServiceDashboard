{"ast":null,"code":"// Licensed to Elasticsearch B.V under one or more agreements.\n// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.\n// See the LICENSE file in the project root for more information\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nvar _objectWithoutProperties = require(\"/Users/kartik/Desktop/ls_dashboard/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nfunction buildIndicesPutTemplate(opts) {\n  // eslint-disable-next-line no-unused-vars\n  const makeRequest = opts.makeRequest,\n        ConfigurationError = opts.ConfigurationError,\n        handleError = opts.handleError,\n        snakeCaseKeys = opts.snakeCaseKeys;\n  /**\n   * Perform a [indices.put_template](http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html) request\n   *\n   * @param {string} name - The name of the template\n   * @param {boolean} include_type_name - Whether a type should be returned in the body of the mappings.\n   * @param {number} order - The order for this template when merging multiple matching ones (higher numbers are merged later, overriding the lower numbers)\n   * @param {boolean} create - Whether the index template should only be added if new or can also replace an existing one\n   * @param {time} timeout - Explicit operation timeout\n   * @param {time} master_timeout - Specify timeout for connection to master\n   * @param {boolean} flat_settings - Return settings in flat format (default: false)\n   * @param {object} body - The template definition\n   */\n\n  const acceptedQuerystring = ['include_type_name', 'order', 'create', 'timeout', 'master_timeout', 'flat_settings', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\n  const snakeCase = {\n    includeTypeName: 'include_type_name',\n    masterTimeout: 'master_timeout',\n    flatSettings: 'flat_settings',\n    errorTrace: 'error_trace',\n    filterPath: 'filter_path'\n  };\n  return function indicesPutTemplate(params, options, callback) {\n    options = options || {};\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof params === 'function' || params == null) {\n      callback = params;\n      params = {};\n      options = {};\n    } // check required parameters\n\n\n    if (params['name'] == null) {\n      const err = new ConfigurationError('Missing required parameter: name');\n      return handleError(err, callback);\n    }\n\n    if (params['body'] == null) {\n      const err = new ConfigurationError('Missing required parameter: body');\n      return handleError(err, callback);\n    } // validate headers object\n\n\n    if (options.headers != null && typeof options.headers !== 'object') {\n      const err = new ConfigurationError(\"Headers should be an object, instead got: \".concat(typeof options.headers));\n      return handleError(err, callback);\n    }\n\n    var warnings = [];\n\n    var _params = params,\n        method = _params.method,\n        body = _params.body,\n        name = _params.name,\n        querystring = _objectWithoutProperties(_params, [\"method\", \"body\", \"name\"]);\n\n    querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring, warnings);\n\n    if (method == null) {\n      method = 'PUT';\n    }\n\n    var ignore = options.ignore;\n\n    if (typeof ignore === 'number') {\n      options.ignore = [ignore];\n    }\n\n    var path = '';\n    path = '/' + '_template' + '/' + encodeURIComponent(name); // build request object\n\n    const request = {\n      method,\n      path,\n      body: body || '',\n      querystring\n    };\n    options.warnings = warnings.length === 0 ? null : warnings;\n    return makeRequest(request, options, callback);\n  };\n}\n\nmodule.exports = buildIndicesPutTemplate;","map":null,"metadata":{},"sourceType":"script"}