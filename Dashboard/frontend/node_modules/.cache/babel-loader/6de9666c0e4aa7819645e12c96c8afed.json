{"ast":null,"code":"var _jsxFileName = \"/Users/kartik/Desktop/lookup-service-webui/Dashboard/frontend/src/components/App.js\";\nimport React, { Component } from 'react';\nimport '../styles/App.css';\nimport { Jumbotron, Button, Table, Tab, Row, Col, Nav } from 'react-bootstrap';\nimport Search from \"react-search\";\nimport ChosenBox from \"./ChosenBox\";\nimport GroupCommunities from \"./GroupCommunities\";\nimport Scheduler from \"./Scheduler\";\nimport HostTable from \"./HostTable\";\nimport Mapper from \"./Mapper\";\nimport { serverURL, hostURL } from \"./config/config\";\nimport { async } from 'q';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.groupCommunitiesCallbackFunction = selected => {\n      this.setState({\n        selectedGroupCommunity: selected\n      });\n    };\n\n    this.schedulerCallbackFunction = selected => {\n      this.setState({\n        chosenSchedulers: selected\n      });\n    };\n\n    this.hostTableCallBackFunction = (hostName, latitude, longitude, address) => {\n      this.setState({\n        serviceVisibility: false\n      });\n      this.setState({\n        chosenHost: hostName,\n        chosenLat: latitude,\n        chosenLong: longitude,\n        serviceAddress: address\n      }, function () {\n        this.searchService(\"all\"); // search for services with all types of servers\n      });\n    };\n\n    this.state = {\n      groupCommunities: [],\n      // initial list of group communities\n      selectedGroupCommunity: \"\",\n      // selected group community\n      pSchedulerTests: [],\n      // initial list of pscheduler tests\n      chosenSchedulers: [],\n      // chosen pscheduler values\n      keys: [],\n      // initial set of keys for autofill search\n      chosenKey: \"\",\n      // chosen key\n      searchTerm: \"\",\n      // typed in search term\n      tableStart: 0,\n      // start of table index\n      tableEnd: 10,\n      // end of table index\n      hostResults: [],\n      serviceVisibility: true,\n      chosenHost: \"\",\n      serviceResults: [],\n      chosenLat: 0,\n      chosenLong: 0,\n      showMap: true,\n      allCoordinates: [],\n      serviceAddress: \"\"\n    };\n    this.groupCommunitiesCallbackFunction = this.groupCommunitiesCallbackFunction.bind(this);\n    this.searchHost = this.searchHost.bind(this);\n    this.searchService = this.searchService.bind(this);\n    this.getService = this.getService.bind(this);\n    this.hostTableNext = this.hostTableNext.bind(this);\n    this.hostTablePrev = this.hostTablePrev.bind(this);\n    this.chooseHostFromMap = this.chooseHostFromMap.bind(this);\n    this.clear = this.clear.bind(this);\n    this.getChosenValues = this.getChosenValues.bind(this);\n  }\n  /**\n   * Loading initial data from api\n   */\n\n\n  componentDidMount() {\n    // inital call to get group communities for dropdown\n    fetch(serverURL + '/groupCommunities', {\n      headers: {\n        'Access-Control-Allow-Origin': hostURL\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        groupCommunities: data\n      });\n    }).catch(console.log); // gets all keys for autofill search\n\n    fetch(serverURL + '/getAllKeys', {\n      headers: {\n        'Access-Control-Allow-Origin': hostURL\n      }\n    }).then(res => res.json()).then(data => {\n      data = data.map(value => ({\n        id: 1,\n        value: value\n      }));\n      this.setState({\n        keys: data\n      });\n    }).catch(console.log); // get pschedulers for dropdown\n\n    fetch(serverURL + '/pSchedulerTests', {\n      headers: {\n        'Access-Control-Allow-Origin': hostURL\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        pSchedulerTests: data\n      });\n    }).catch(console.log); // gets coordinates to initialize map\n\n    fetch(serverURL + '/getCoordinates', {\n      headers: {\n        'Access-Control-Allow-Origin': hostURL\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        allCoordinates: data\n      });\n    }).catch(console.log);\n  } // callback for selcting community\n\n\n  // update search value on change in search box\n  updateSearch() {\n    this.setState({\n      searchTerm: document.getElementById(\"searchBar\").value\n    });\n  } // update chosen key on selecting key from dropdown\n\n\n  keySelect(items) {\n    if (items.length !== 0) {\n      this.setState({\n        chosenKey: items\n      });\n    } else {\n      this.setState({\n        chosenKey: \"\"\n      });\n    }\n\n    var selector = document.getElementById(\"search-input\");\n    selector.value = \"\";\n  } // on search button click search api\n\n\n  searchHost() {\n    var key = \"\";\n\n    if (this.state.chosenKey.length !== 0) {\n      key = this.state.chosenKey[0][\"value\"];\n    } else {\n      key = \"\";\n    }\n\n    if (key !== \"\" & this.state.searchTerm === \"\") {\n      alert(\"Key must have a value specified\");\n    } else if (key === \"\" & this.state.searchTerm !== \"\") {\n      alert(\"Search must have a value specified\");\n    } else if (key === \"\" & this.state.searchTerm === \"\" & this.state.selectedGroupCommunity === \"\" & this.state.chosenSchedulers.length === 0) {\n      alert(\"Please fill in fields before searching\");\n    } else {\n      fetch(serverURL + '/search?key=' + key + \"&groupCommunity=\" + this.state.selectedGroupCommunity + \"&pSchedulers=\" + this.state.chosenSchedulers + \"&searchTerm=\" + this.state.searchTerm + \"&limit=1000\", {\n        headers: {\n          'Access-Control-Allow-Origin': hostURL\n        }\n      }).then(res => res.json()).then(data => {\n        this.setState({\n          hostResults: data\n        });\n      }).catch(console.log);\n      this.setState({\n        serviceVisibility: true\n      });\n      document.getElementById(\"informationTabs-tab-first\").click();\n    }\n  } // on click of host in host table\n\n\n  // on click of host using map\n  chooseHostFromMap(hostName, type, location, address) {\n    this.setState({\n      serviceVisibility: false\n    });\n    this.setState({\n      chosenHost: hostName,\n      chosenLat: location.lat,\n      chosenLong: location.lng,\n      serviceAddress: address\n    }, function () {\n      this.searchService(type);\n    });\n  } // search service on choosing a host\n\n\n  searchService(type) {\n    fetch(serverURL + '/searchService?hosts=' + this.state.chosenHost + \"&type=\" + type, {\n      headers: {\n        'Access-Control-Allow-Origin': hostURL\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        serviceResults: data\n      });\n    }).catch(console.log);\n    document.getElementById(\"informationTabs-tab-second\").click();\n  } // render service table\n\n\n  getService(props) {\n    const serviceInformation = props.serviceInformation;\n    const serviceTable = serviceInformation.map(service => React.createElement(\"tr\", {\n      key: Math.random(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, service[\"name\"], \" - \", service[\"type\"]), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, this.state.serviceAddress), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, this.state.chosenLat, \" , \", this.state.chosenLong, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }), \" \", service[\"locationString\"]), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, service[\"communities\"]), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, service[\"version\"]), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"warning\",\n      onClick: () => {\n        this.showServiceJSON({\n          service\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"View JSON\"))));\n    return React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, serviceTable);\n  } // clicking next on host table\n\n\n  hostTableNext() {\n    if (this.state.hostResults.length > this.state.tableEnd) {\n      this.setState({\n        tableEnd: this.state.tableEnd + 10,\n        tableStart: this.state.tableStart + 10\n      });\n    }\n  } // clicking previous on host table\n\n\n  hostTablePrev() {\n    if (this.state.tableStart - 10 >= 0) {\n      this.setState({\n        tableEnd: this.state.tableEnd - 10,\n        tableStart: this.state.tableStart - 10\n      });\n    }\n  } // show json popup for service table\n\n\n  showServiceJSON(host) {\n    alert(host[\"service\"][\"JSON\"]);\n  } // clear all values on clicking clear button\n\n\n  clear() {\n    var key = this.state.keys;\n    this.setState({\n      selectedGroupCommunity: \"\",\n      chosenSchedulers: [],\n      chosenKey: \"\",\n      searchTerm: \"\",\n      tableStart: 0,\n      tableEnd: 10,\n      hostResults: [],\n      serviceVisibility: true,\n      chosenHost: \"\",\n      serviceResults: [],\n      chosenLat: 0,\n      chosenLong: 0,\n      showMap: true\n    }, function () {\n      this.setState({\n        keys: key\n      });\n    });\n    var communityDrop = document.getElementById(\"communitiesdropDown\");\n    communityDrop.textContent = \"Group communities\";\n    var box = document.getElementsByClassName('schedulerCheckBox');\n\n    for (var i = 0; i < box.length; i++) {\n      if (box[i].type === 'checkbox') box[i].checked = false;\n    }\n\n    var searchBar = document.getElementById(\"searchBar\");\n    searchBar.value = \"\";\n    alert(\"Key needs to be cleared manually\");\n  } // chosen values box\n\n\n  getChosenValues(props) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"howToBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, \"Key:\\xA0\"), this.state.chosenKey.length > 0 ? this.state.chosenKey[0].value : \"\", \" \"), React.createElement(\"p\", {\n      className: \"howToBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, \"Search:\\xA0\"), \" \", this.state.searchTerm), React.createElement(\"p\", {\n      className: \"howToBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, \"Communities:\\xA0\"), this.state.selectedGroupCommunity, \" \"), React.createElement(\"p\", {\n      className: \"howToBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, \"pScheduler:\\xA0\"), props.chosenpSchedulers.toString()));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, React.createElement(Jumbotron, {\n      className: \"head\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"grid-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"grid-item\",\n      id: \"textBox2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Chosen values\"), React.createElement(ChosenBox, {\n      chosenpSchedulers: this.state.chosenSchedulers,\n      chosenKey: this.state.chosenKey,\n      searchTerm: this.state.searchTerm,\n      selectedGroupCommunity: this.state.selectedGroupCommunity,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"grid-item\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inlineSearch\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268\n      },\n      __self: this\n    }, React.createElement(Search, {\n      items: this.state.keys,\n      placeholder: \"key (optional) : \",\n      maxSelected: 1,\n      multiple: true,\n      onItemsChanged: this.keySelect.bind(this),\n      className: \"searchBarField\",\n      id: \"keySelector\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Search..\",\n      className: \"searchBar\",\n      onChange: this.updateSearch.bind(this),\n      id: \"searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"dropdownDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, React.createElement(GroupCommunities, {\n      communities: this.state.groupCommunities,\n      parentCallBack: this.groupCommunitiesCallbackFunction,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }), React.createElement(Scheduler, {\n      pSchedulers: this.state.pSchedulerTests,\n      parentCallBack: this.schedulerCallbackFunction,\n      chosenSchedulers: this.state.chosenSchedulers,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"inlineButtons\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"warning\",\n      onClick: () => {\n        this.searchHost();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301\n      },\n      __self: this\n    }, \"Submit\"), React.createElement(Button, {\n      variant: \"danger\",\n      onClick: () => {\n        this.clear();\n      },\n      className: \"clearButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, \"Clear\")))), React.createElement(\"div\", {\n      className: \"grid-item\",\n      id: \"textbox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309\n      },\n      __self: this\n    }), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, \"How to use the LS Directory\"), React.createElement(\"p\", {\n      className: \"howToBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, \"Key:\"), \" The key signifies the \\\"key\\\" in the key-value schema of the database\"), React.createElement(\"p\", {\n      className: \"howToBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, \"Search:\"), \" The search is the value needed for the selected key\"), React.createElement(\"p\", {\n      className: \"howToBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \"Communities:\"), \" Filter for the group community value\"), React.createElement(\"p\", {\n      className: \"howToBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }, \"pScheduler:\"), \" Filter for the pScheduler tests\")))), React.createElement(Tab.Container, {\n      id: \"informationTabs\",\n      defaultActiveKey: \"first\",\n      className: \"informationTabs\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(Nav, {\n      variant: \"pills\",\n      className: \"flex-column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, React.createElement(Nav.Item, {\n      id: \"hostTab\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"first\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, \"Host Information\")), React.createElement(Nav.Item, {\n      id: \"serviceTab\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"second\",\n      disabled: this.state.serviceVisibility,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 329\n      },\n      __self: this\n    }, \"Service Information\")), React.createElement(Nav.Item, {\n      id: \"mapTab\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(Nav.Link, {\n      eventKey: \"third\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }, \"Map\")))), React.createElement(Col, {\n      sm: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }, React.createElement(Tab.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338\n      },\n      __self: this\n    }, React.createElement(Tab.Pane, {\n      eventKey: \"first\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"prevNextButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"queryResults\",\n      hidden: this.state.hostResults.length === 0,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, \"This query returned \", this.state.hostResults.length, \" results\"), React.createElement(Button, {\n      variant: \"info\",\n      onClick: this.hostTablePrev,\n      className: \"prevButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348\n      },\n      __self: this\n    }, \"Previous\"), React.createElement(Button, {\n      variant: \"danger\",\n      onClick: this.hostTableNext,\n      className: \"nextButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, \"Next\")), React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, \"Host Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }, \"Hardware\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, \"System Info\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, \"Toolkit-Version\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, \"Communities\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371\n      },\n      __self: this\n    }, \"Pscheduler Tests\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }, \"JSON\"))), React.createElement(HostTable, {\n      hostInformation: this.state.hostResults,\n      parentCallBack: this.hostTableCallBackFunction,\n      tableStart: this.state.tableStart,\n      tableEnd: this.state.tableEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }))), React.createElement(Tab.Pane, {\n      eventKey: \"second\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(Table, {\n      striped: true,\n      bordered: true,\n      hover: true,\n      variant: \"dark\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, \"Service Name\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, \"Address\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, \"geographic Location\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, \"Communities\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, \"Version\"), React.createElement(\"th\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, \"JSON\"))), React.createElement(this.getService, {\n      serviceInformation: this.state.serviceResults,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397\n      },\n      __self: this\n    }))), React.createElement(Tab.Pane, {\n      eventKey: \"third\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(Mapper, {\n      lat: this.state.chosenLat,\n      long: this.state.chosenLong,\n      all: this.state.allCoordinates,\n      hostResults: this.state.hostResults,\n      chooseHostCallback: this.chooseHostFromMap,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }))))))));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/kartik/Desktop/lookup-service-webui/Dashboard/frontend/src/components/App.js"],"names":["React","Component","Jumbotron","Button","Table","Tab","Row","Col","Nav","Search","ChosenBox","GroupCommunities","Scheduler","HostTable","Mapper","serverURL","hostURL","async","App","constructor","groupCommunitiesCallbackFunction","selected","setState","selectedGroupCommunity","schedulerCallbackFunction","chosenSchedulers","hostTableCallBackFunction","hostName","latitude","longitude","address","serviceVisibility","chosenHost","chosenLat","chosenLong","serviceAddress","searchService","state","groupCommunities","pSchedulerTests","keys","chosenKey","searchTerm","tableStart","tableEnd","hostResults","serviceResults","showMap","allCoordinates","bind","searchHost","getService","hostTableNext","hostTablePrev","chooseHostFromMap","clear","getChosenValues","componentDidMount","fetch","headers","then","res","json","data","catch","console","log","map","value","id","updateSearch","document","getElementById","keySelect","items","length","selector","key","alert","click","type","location","lat","lng","props","serviceInformation","serviceTable","service","Math","random","showServiceJSON","host","communityDrop","textContent","box","getElementsByClassName","i","checked","searchBar","chosenpSchedulers","toString","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,mBAAP;AACA,SAASC,SAAT,EAAoBC,MAApB,EAA4BC,KAA5B,EAAmCC,GAAnC,EAAwCC,GAAxC,EAA6CC,GAA7C,EAAkDC,GAAlD,QAA6D,iBAA7D;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,EAAoBC,OAApB,QAAmC,iBAAnC;AACA,SAASC,KAAT,QAAsB,GAAtB;;AAEA,MAAMC,GAAN,SAAkBjB,SAAlB,CAA4B;AAE1BkB,EAAAA,WAAW,GAAG;AACZ;;AADY,SAyEdC,gCAzEc,GAyEsBC,QAAD,IAAc;AAC/C,WAAKC,QAAL,CAAc;AAAEC,QAAAA,sBAAsB,EAAEF;AAA1B,OAAd;AACD,KA3Ea;;AAAA,SA8EdG,yBA9Ec,GA8EeH,QAAD,IAAc;AACxC,WAAKC,QAAL,CAAc;AAAEG,QAAAA,gBAAgB,EAAEJ;AAApB,OAAd;AACD,KAhFa;;AAAA,SA6HdK,yBA7Hc,GA6Hc,CAACC,QAAD,EAAWC,QAAX,EAAqBC,SAArB,EAAgCC,OAAhC,KAA4C;AACtE,WAAKR,QAAL,CAAc;AAAES,QAAAA,iBAAiB,EAAE;AAArB,OAAd;AACA,WAAKT,QAAL,CAAc;AAAEU,QAAAA,UAAU,EAAEL,QAAd;AAAwBM,QAAAA,SAAS,EAAEL,QAAnC;AAA6CM,QAAAA,UAAU,EAAEL,SAAzD;AAAoEM,QAAAA,cAAc,EAAEL;AAApF,OAAd,EACE,YAAY;AACV,aAAKM,aAAL,CAAmB,KAAnB,EADU,CACgB;AAC3B,OAHH;AAID,KAnIa;;AAEZ,SAAKC,KAAL,GAAa;AACXC,MAAAA,gBAAgB,EAAE,EADP;AACW;AACtBf,MAAAA,sBAAsB,EAAE,EAFb;AAEiB;AAC5BgB,MAAAA,eAAe,EAAE,EAHN;AAGU;AACrBd,MAAAA,gBAAgB,EAAE,EAJP;AAIW;AACtBe,MAAAA,IAAI,EAAE,EALK;AAKD;AACVC,MAAAA,SAAS,EAAE,EANA;AAMI;AACfC,MAAAA,UAAU,EAAE,EAPD;AAOK;AAChBC,MAAAA,UAAU,EAAE,CARD;AAQI;AACfC,MAAAA,QAAQ,EAAE,EATC;AASG;AACdC,MAAAA,WAAW,EAAE,EAVF;AAWXd,MAAAA,iBAAiB,EAAE,IAXR;AAYXC,MAAAA,UAAU,EAAE,EAZD;AAaXc,MAAAA,cAAc,EAAE,EAbL;AAcXb,MAAAA,SAAS,EAAE,CAdA;AAeXC,MAAAA,UAAU,EAAE,CAfD;AAgBXa,MAAAA,OAAO,EAAE,IAhBE;AAiBXC,MAAAA,cAAc,EAAE,EAjBL;AAkBXb,MAAAA,cAAc,EAAE;AAlBL,KAAb;AAqBA,SAAKf,gCAAL,GAAwC,KAAKA,gCAAL,CAAsC6B,IAAtC,CAA2C,IAA3C,CAAxC;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKb,aAAL,GAAqB,KAAKA,aAAL,CAAmBa,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKE,UAAL,GAAkB,KAAKA,UAAL,CAAgBF,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKG,aAAL,GAAqB,KAAKA,aAAL,CAAmBH,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKI,aAAL,GAAqB,KAAKA,aAAL,CAAmBJ,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKK,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBL,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKM,KAAL,GAAa,KAAKA,KAAL,CAAWN,IAAX,CAAgB,IAAhB,CAAb;AACA,SAAKO,eAAL,GAAuB,KAAKA,eAAL,CAAqBP,IAArB,CAA0B,IAA1B,CAAvB;AACD;AAED;;;;;AAGAQ,EAAAA,iBAAiB,GAAG;AAClB;AACAC,IAAAA,KAAK,CAAC3C,SAAS,GAAG,mBAAb,EAAkC;AAAE4C,MAAAA,OAAO,EAAE;AAAE,uCAA+B3C;AAAjC;AAAX,KAAlC,CAAL,CACG4C,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd,WAAKzC,QAAL,CAAc;AAAEgB,QAAAA,gBAAgB,EAAEyB;AAApB,OAAd;AACD,KAJH,EAKGC,KALH,CAKSC,OAAO,CAACC,GALjB,EAFkB,CASlB;;AACAR,IAAAA,KAAK,CAAC3C,SAAS,GAAG,aAAb,EAA4B;AAAE4C,MAAAA,OAAO,EAAE;AAAE,uCAA+B3C;AAAjC;AAAX,KAA5B,CAAL,CACG4C,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAESG,IAAD,IAAU;AACdA,MAAAA,IAAI,GAAGA,IAAI,CAACI,GAAL,CAASC,KAAK,KAAK;AAAEC,QAAAA,EAAE,EAAE,CAAN;AAASD,QAAAA,KAAK,EAAEA;AAAhB,OAAL,CAAd,CAAP;AACA,WAAK9C,QAAL,CAAc;AAAEkB,QAAAA,IAAI,EAAEuB;AAAR,OAAd;AACD,KALH,EAMGC,KANH,CAMSC,OAAO,CAACC,GANjB,EAVkB,CAkBlB;;AACAR,IAAAA,KAAK,CAAC3C,SAAS,GAAG,kBAAb,EAAiC;AAAE4C,MAAAA,OAAO,EAAE;AAAE,uCAA+B3C;AAAjC;AAAX,KAAjC,CAAL,CACG4C,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd,WAAKzC,QAAL,CAAc;AAAEiB,QAAAA,eAAe,EAAEwB;AAAnB,OAAd;AACD,KAJH,EAKGC,KALH,CAKSC,OAAO,CAACC,GALjB,EAnBkB,CA0BlB;;AACAR,IAAAA,KAAK,CAAC3C,SAAS,GAAG,iBAAb,EAAgC;AAAE4C,MAAAA,OAAO,EAAE;AAAE,uCAA+B3C;AAAjC;AAAX,KAAhC,CAAL,CACG4C,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd,WAAKzC,QAAL,CAAc;AAAE0B,QAAAA,cAAc,EAAEe;AAAlB,OAAd;AACD,KAJH,EAKGC,KALH,CAKSC,OAAO,CAACC,GALjB;AAMD,GAxEyB,CA0E1B;;;AAUA;AACAI,EAAAA,YAAY,GAAG;AACb,SAAKhD,QAAL,CAAc;AAAEoB,MAAAA,UAAU,EAAE6B,QAAQ,CAACC,cAAT,CAAwB,WAAxB,EAAqCJ;AAAnD,KAAd;AACD,GAvFyB,CAyF1B;;;AACAK,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACf,QAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACtB,WAAKrD,QAAL,CAAc;AAAEmB,QAAAA,SAAS,EAAEiC;AAAb,OAAd;AACD,KAFD,MAEO;AACL,WAAKpD,QAAL,CAAc;AAAEmB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACD;;AACD,QAAImC,QAAQ,GAAGL,QAAQ,CAACC,cAAT,CAAwB,cAAxB,CAAf;AACAI,IAAAA,QAAQ,CAACR,KAAT,GAAiB,EAAjB;AACD,GAlGyB,CAoG1B;;;AACAlB,EAAAA,UAAU,GAAG;AACX,QAAI2B,GAAG,GAAG,EAAV;;AACA,QAAI,KAAKxC,KAAL,CAAWI,SAAX,CAAqBkC,MAArB,KAAgC,CAApC,EAAuC;AACrCE,MAAAA,GAAG,GAAG,KAAKxC,KAAL,CAAWI,SAAX,CAAqB,CAArB,EAAwB,OAAxB,CAAN;AACD,KAFD,MAEO;AACLoC,MAAAA,GAAG,GAAG,EAAN;AACD;;AACD,QAAIA,GAAG,KAAK,EAAR,GAAa,KAAKxC,KAAL,CAAWK,UAAX,KAA0B,EAA3C,EAA+C;AAC7CoC,MAAAA,KAAK,CAAC,iCAAD,CAAL;AACD,KAFD,MAEO,IAAID,GAAG,KAAK,EAAR,GAAa,KAAKxC,KAAL,CAAWK,UAAX,KAA0B,EAA3C,EAA+C;AACpDoC,MAAAA,KAAK,CAAC,oCAAD,CAAL;AACD,KAFM,MAEA,IAAID,GAAG,KAAK,EAAR,GAAa,KAAKxC,KAAL,CAAWK,UAAX,KAA0B,EAAvC,GAA4C,KAAKL,KAAL,CAAWd,sBAAX,KAAsC,EAAlF,GAAuF,KAAKc,KAAL,CAAWZ,gBAAX,CAA4BkD,MAA5B,KAAuC,CAAlI,EAAqI;AAC1IG,MAAAA,KAAK,CAAC,wCAAD,CAAL;AACD,KAFM,MAEA;AACLpB,MAAAA,KAAK,CAAC3C,SAAS,GAAG,cAAZ,GAA6B8D,GAA7B,GAAmC,kBAAnC,GAAwD,KAAKxC,KAAL,CAAWd,sBAAnE,GAA4F,eAA5F,GAA8G,KAAKc,KAAL,CAAWZ,gBAAzH,GAA4I,cAA5I,GAA6J,KAAKY,KAAL,CAAWK,UAAxK,GAAqL,aAAtL,EAAqM;AAAEiB,QAAAA,OAAO,EAAE;AAAE,yCAA+B3C;AAAjC;AAAX,OAArM,CAAL,CACG4C,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd,aAAKzC,QAAL,CAAc;AAAEuB,UAAAA,WAAW,EAAEkB;AAAf,SAAd;AACD,OAJH,EAKGC,KALH,CAKSC,OAAO,CAACC,GALjB;AAMA,WAAK5C,QAAL,CAAc;AAAES,QAAAA,iBAAiB,EAAE;AAArB,OAAd;AACAwC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,2BAAxB,EAAqDO,KAArD;AACD;AACF,GA5HyB,CA8H1B;;;AASA;AACAzB,EAAAA,iBAAiB,CAAC3B,QAAD,EAAWqD,IAAX,EAAiBC,QAAjB,EAA2BnD,OAA3B,EAAoC;AACnD,SAAKR,QAAL,CAAc;AAAES,MAAAA,iBAAiB,EAAE;AAArB,KAAd;AACA,SAAKT,QAAL,CAAc;AAAEU,MAAAA,UAAU,EAAEL,QAAd;AAAwBM,MAAAA,SAAS,EAAEgD,QAAQ,CAACC,GAA5C;AAAiDhD,MAAAA,UAAU,EAAE+C,QAAQ,CAACE,GAAtE;AAA2EhD,MAAAA,cAAc,EAAEL;AAA3F,KAAd,EAAoH,YAAY;AAAE,WAAKM,aAAL,CAAmB4C,IAAnB;AAA0B,KAA5J;AACD,GA3IyB,CA6I1B;;;AACA5C,EAAAA,aAAa,CAAC4C,IAAD,EAAO;AAClBtB,IAAAA,KAAK,CAAC3C,SAAS,GAAG,uBAAZ,GAAsC,KAAKsB,KAAL,CAAWL,UAAjD,GAA8D,QAA9D,GAAyEgD,IAA1E,EAAgF;AAAErB,MAAAA,OAAO,EAAE;AAAE,uCAA+B3C;AAAjC;AAAX,KAAhF,CAAL,CACG4C,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAESG,IAAD,IAAU;AACd,WAAKzC,QAAL,CAAc;AAAEwB,QAAAA,cAAc,EAAEiB;AAAlB,OAAd;AACD,KAJH,EAKGC,KALH,CAKSC,OAAO,CAACC,GALjB;AAMAK,IAAAA,QAAQ,CAACC,cAAT,CAAwB,4BAAxB,EAAsDO,KAAtD;AACD,GAtJyB,CAwJ1B;;;AACA5B,EAAAA,UAAU,CAACiC,KAAD,EAAQ;AAChB,UAAMC,kBAAkB,GAAGD,KAAK,CAACC,kBAAjC;AACA,UAAMC,YAAY,GAAGD,kBAAkB,CAAClB,GAAnB,CAAwBoB,OAAD,IAC1C;AAAI,MAAA,GAAG,EAAEC,IAAI,CAACC,MAAL,EAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,OAAO,CAAC,MAAD,CAAZ,SAAyBA,OAAO,CAAC,MAAD,CAAhC,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKlD,KAAL,CAAWF,cAAhB,CAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKE,KAAL,CAAWJ,SAAhB,SAA8B,KAAKI,KAAL,CAAWH,UAAzC,EAAoD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApD,OAA4DqD,OAAO,CAAC,gBAAD,CAAnE,CAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,OAAO,CAAC,aAAD,CAAZ,CAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKA,OAAO,CAAC,SAAD,CAAZ,CALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAI,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,OAAO,EAAE,MAAM;AAAE,aAAKG,eAAL,CAAqB;AAAEH,UAAAA;AAAF,SAArB;AAAmC,OAA9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAJ,CANF,CADmB,CAArB;AAUA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,YADH,CADF;AAKD,GA1KyB,CA4K1B;;;AACAlC,EAAAA,aAAa,GAAG;AACd,QAAI,KAAKf,KAAL,CAAWQ,WAAX,CAAuB8B,MAAvB,GAAgC,KAAKtC,KAAL,CAAWO,QAA/C,EAAyD;AACvD,WAAKtB,QAAL,CAAc;AAAEsB,QAAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWO,QAAX,GAAsB,EAAlC;AAAsCD,QAAAA,UAAU,EAAE,KAAKN,KAAL,CAAWM,UAAX,GAAwB;AAA1E,OAAd;AACD;AACF,GAjLyB,CAmL1B;;;AACAU,EAAAA,aAAa,GAAG;AACd,QAAI,KAAKhB,KAAL,CAAWM,UAAX,GAAwB,EAAxB,IAA8B,CAAlC,EAAqC;AACnC,WAAKrB,QAAL,CAAc;AAAEsB,QAAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWO,QAAX,GAAsB,EAAlC;AAAsCD,QAAAA,UAAU,EAAE,KAAKN,KAAL,CAAWM,UAAX,GAAwB;AAA1E,OAAd;AACD;AACF,GAxLyB,CA0L1B;;;AACA+C,EAAAA,eAAe,CAACC,IAAD,EAAO;AACpBb,IAAAA,KAAK,CAACa,IAAI,CAAC,SAAD,CAAJ,CAAgB,MAAhB,CAAD,CAAL;AACD,GA7LyB,CA+L1B;;;AACApC,EAAAA,KAAK,GAAG;AACN,QAAIsB,GAAG,GAAG,KAAKxC,KAAL,CAAWG,IAArB;AACA,SAAKlB,QAAL,CAAc;AACZC,MAAAA,sBAAsB,EAAE,EADZ;AAEZE,MAAAA,gBAAgB,EAAE,EAFN;AAGZgB,MAAAA,SAAS,EAAE,EAHC;AAIZC,MAAAA,UAAU,EAAE,EAJA;AAKZC,MAAAA,UAAU,EAAE,CALA;AAMZC,MAAAA,QAAQ,EAAE,EANE;AAOZC,MAAAA,WAAW,EAAE,EAPD;AAQZd,MAAAA,iBAAiB,EAAE,IARP;AASZC,MAAAA,UAAU,EAAE,EATA;AAUZc,MAAAA,cAAc,EAAE,EAVJ;AAWZb,MAAAA,SAAS,EAAE,CAXC;AAYZC,MAAAA,UAAU,EAAE,CAZA;AAaZa,MAAAA,OAAO,EAAE;AAbG,KAAd,EAcG,YAAY;AACb,WAAKzB,QAAL,CAAc;AAAEkB,QAAAA,IAAI,EAAEqC;AAAR,OAAd;AACD,KAhBD;AAiBA,QAAIe,aAAa,GAAGrB,QAAQ,CAACC,cAAT,CAAwB,qBAAxB,CAApB;AACAoB,IAAAA,aAAa,CAACC,WAAd,GAA4B,mBAA5B;AACA,QAAIC,GAAG,GAAGvB,QAAQ,CAACwB,sBAAT,CAAgC,mBAAhC,CAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACnB,MAAxB,EAAgCqB,CAAC,EAAjC,EAAqC;AACnC,UAAIF,GAAG,CAACE,CAAD,CAAH,CAAOhB,IAAP,KAAgB,UAApB,EACEc,GAAG,CAACE,CAAD,CAAH,CAAOC,OAAP,GAAiB,KAAjB;AACH;;AAED,QAAIC,SAAS,GAAG3B,QAAQ,CAACC,cAAT,CAAwB,WAAxB,CAAhB;AACA0B,IAAAA,SAAS,CAAC9B,KAAV,GAAkB,EAAlB;AACAU,IAAAA,KAAK,CAAC,kCAAD,CAAL;AACD,GA9NyB,CAgO1B;;;AACAtB,EAAAA,eAAe,CAAC4B,KAAD,EAAQ;AACrB,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAxB,EAA2C,KAAK/C,KAAL,CAAWI,SAAX,CAAqBkC,MAArB,GAA8B,CAA/B,GAAoC,KAAKtC,KAAL,CAAWI,SAAX,CAAqB,CAArB,EAAwB2B,KAA5D,GAAoE,EAA9G,MADF,EAEE;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAxB,OAA8C,KAAK/B,KAAL,CAAWK,UAAzD,CAFF,EAGE;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAxB,EAAkD,KAAKL,KAAL,CAAWd,sBAA7D,MAHF,EAIE;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAxB,EAAiD6D,KAAK,CAACe,iBAAN,CAAwBC,QAAxB,EAAjD,CAJF,CADF;AAQD;;AAIDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,SAAD;AAAW,MAAA,SAAS,EAAC,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,EAAE,EAAC,UAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAFF,EAGE,oBAAC,SAAD;AACE,MAAA,iBAAiB,EAAE,KAAKhE,KAAL,CAAWZ,gBADhC;AAEE,MAAA,SAAS,EAAE,KAAKY,KAAL,CAAWI,SAFxB;AAGE,MAAA,UAAU,EAAE,KAAKJ,KAAL,CAAWK,UAHzB;AAIE,MAAA,sBAAsB,EAAE,KAAKL,KAAL,CAAWd,sBAJrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CAFF,EAYE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAE,KAAKc,KAAL,CAAWG,IADpB;AAEE,MAAA,WAAW,EAAC,mBAFd;AAGE,MAAA,WAAW,EAAE,CAHf;AAIE,MAAA,QAAQ,EAAE,IAJZ;AAKE,MAAA,cAAc,EAAE,KAAKiC,SAAL,CAAexB,IAAf,CAAoB,IAApB,CALlB;AAME,MAAA,SAAS,EAAC,gBANZ;AAOE,MAAA,EAAE,EAAC,aAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAWE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,WAAW,EAAC,UAFd;AAGE,MAAA,SAAS,EAAC,WAHZ;AAIE,MAAA,QAAQ,EAAE,KAAKqB,YAAL,CAAkBrB,IAAlB,CAAuB,IAAvB,CAJZ;AAKE,MAAA,EAAE,EAAC,WALL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,CADF,EAmBE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,gBAAD;AACE,MAAA,WAAW,EAAE,KAAKZ,KAAL,CAAWC,gBAD1B;AAEE,MAAA,cAAc,EAAE,KAAKlB,gCAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAME,oBAAC,SAAD;AACE,MAAA,WAAW,EAAE,KAAKiB,KAAL,CAAWE,eAD1B;AAEE,MAAA,cAAc,EAAE,KAAKf,yBAFvB;AAGE,MAAA,gBAAgB,EAAE,KAAKa,KAAL,CAAWZ,gBAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CAnBF,EA+BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,SAAhB;AAA0B,MAAA,OAAO,EAAE,MAAM;AAAE,aAAKyB,UAAL;AAAmB,OAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAIE,oBAAC,MAAD;AAAQ,MAAA,OAAO,EAAC,QAAhB;AAAyB,MAAA,OAAO,EAAE,MAAM;AAAE,aAAKK,KAAL;AAAc,OAAxD;AAA0D,MAAA,SAAS,EAAC,aAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJF,CADF,CA/BF,CAZF,EAoDE;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,EAAE,EAAC,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAHF,EAIE;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAxB,2EAJF,EAKE;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAxB,yDALF,EAME;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAxB,0CANF,EAOE;AAAG,MAAA,SAAS,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAxB,qCAPF,CApDF,CADF,CADF,EAmEE,oBAAC,GAAD,CAAK,SAAL;AAAe,MAAA,EAAE,EAAC,iBAAlB;AAAoC,MAAA,gBAAgB,EAAC,OAArD;AAA6D,MAAA,SAAS,EAAC,iBAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD;AAAK,MAAA,OAAO,EAAC,OAAb;AAAqB,MAAA,SAAS,EAAC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,EAAE,EAAC,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,CADF,EAIE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,EAAE,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,QAAnB;AAA4B,MAAA,QAAQ,EAAE,KAAKlB,KAAL,CAAWN,iBAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CAJF,EAOE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,EAAE,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CAPF,CADF,CAFF,EAgBE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,GAAD,CAAK,OAAL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,EAAC,cADZ;AAEE,MAAA,MAAM,EAAE,KAAKM,KAAL,CAAWQ,WAAX,CAAuB8B,MAAvB,KAAkC,CAF5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAGyB,KAAKtC,KAAL,CAAWQ,WAAX,CAAuB8B,MAHhD,aADF,EAOE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAC,MADV;AAEE,MAAA,OAAO,EAAE,KAAKtB,aAFhB;AAGE,MAAA,SAAS,EAAC,YAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPF,EAcE,oBAAC,MAAD;AACE,MAAA,OAAO,EAAC,QADV;AAEE,MAAA,OAAO,EAAE,KAAKD,aAFhB;AAGE,MAAA,SAAS,EAAC,YAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF,CADF,EAuBE,oBAAC,KAAD;AAAO,MAAA,OAAO,MAAd;AAAe,MAAA,QAAQ,MAAvB;AAAwB,MAAA,KAAK,MAA7B;AAA8B,MAAA,OAAO,EAAC,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPF,CADF,CADF,EAaE,oBAAC,SAAD;AACE,MAAA,eAAe,EAAE,KAAKf,KAAL,CAAWQ,WAD9B;AAEE,MAAA,cAAc,EAAE,KAAKnB,yBAFvB;AAGE,MAAA,UAAU,EAAE,KAAKW,KAAL,CAAWM,UAHzB;AAIE,MAAA,QAAQ,EAAE,KAAKN,KAAL,CAAWO,QAJvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,CAvBF,CAFF,EA8CE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,QAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,OAAO,MAAd;AAAe,MAAA,QAAQ,MAAvB;AAAwB,MAAA,KAAK,MAA7B;AAA8B,MAAA,OAAO,EAAC,MAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAHF,EAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAJF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBALF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANF,CADF,CADF,EAYE,yBAAM,UAAN;AAAiB,MAAA,kBAAkB,EAAE,KAAKP,KAAL,CAAWS,cAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CADF,CA9CF,EA+DE,oBAAC,GAAD,CAAK,IAAL;AAAU,MAAA,QAAQ,EAAC,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,MAAD;AACE,MAAA,GAAG,EAAE,KAAKT,KAAL,CAAWJ,SADlB;AAEE,MAAA,IAAI,EAAE,KAAKI,KAAL,CAAWH,UAFnB;AAGE,MAAA,GAAG,EAAE,KAAKG,KAAL,CAAWW,cAHlB;AAIE,MAAA,WAAW,EAAE,KAAKX,KAAL,CAAWQ,WAJ1B;AAKE,MAAA,kBAAkB,EAAE,KAAKS,iBAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CA/DF,CADF,CAhBF,CADF,CAnEF,CADF;AAuKD;;AAtZyB;;AAwZ3B;AAED,eAAepC,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/App.css';\nimport { Jumbotron, Button, Table, Tab, Row, Col, Nav } from 'react-bootstrap'\nimport Search from \"react-search\"\nimport ChosenBox from \"./ChosenBox\"\nimport GroupCommunities from \"./GroupCommunities\"\nimport Scheduler from \"./Scheduler\"\nimport HostTable from \"./HostTable\"\nimport Mapper from \"./Mapper\"\nimport { serverURL, hostURL } from \"./config/config\"\nimport { async } from 'q';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      groupCommunities: [], // initial list of group communities\n      selectedGroupCommunity: \"\", // selected group community\n      pSchedulerTests: [], // initial list of pscheduler tests\n      chosenSchedulers: [], // chosen pscheduler values\n      keys: [], // initial set of keys for autofill search\n      chosenKey: \"\", // chosen key\n      searchTerm: \"\", // typed in search term\n      tableStart: 0, // start of table index\n      tableEnd: 10, // end of table index\n      hostResults: [],\n      serviceVisibility: true,\n      chosenHost: \"\",\n      serviceResults: [],\n      chosenLat: 0,\n      chosenLong: 0,\n      showMap: true,\n      allCoordinates: [],\n      serviceAddress: \"\"\n    }\n\n    this.groupCommunitiesCallbackFunction = this.groupCommunitiesCallbackFunction.bind(this);\n    this.searchHost = this.searchHost.bind(this);\n    this.searchService = this.searchService.bind(this)\n    this.getService = this.getService.bind(this);\n    this.hostTableNext = this.hostTableNext.bind(this);\n    this.hostTablePrev = this.hostTablePrev.bind(this);\n    this.chooseHostFromMap = this.chooseHostFromMap.bind(this);\n    this.clear = this.clear.bind(this);\n    this.getChosenValues = this.getChosenValues.bind(this);\n  }\n\n  /**\n   * Loading initial data from api\n   */\n  componentDidMount() {\n    // inital call to get group communities for dropdown\n    fetch(serverURL + '/groupCommunities', { headers: { 'Access-Control-Allow-Origin': hostURL } })\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ groupCommunities: data })\n      })\n      .catch(console.log)\n\n    // gets all keys for autofill search\n    fetch(serverURL + '/getAllKeys', { headers: { 'Access-Control-Allow-Origin': hostURL } })\n      .then(res => res.json())\n      .then((data) => {\n        data = data.map(value => ({ id: 1, value: value }))\n        this.setState({ keys: data })\n      })\n      .catch(console.log)\n\n    // get pschedulers for dropdown\n    fetch(serverURL + '/pSchedulerTests', { headers: { 'Access-Control-Allow-Origin': hostURL } })\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ pSchedulerTests: data })\n      })\n      .catch(console.log)\n\n    // gets coordinates to initialize map\n    fetch(serverURL + '/getCoordinates', { headers: { 'Access-Control-Allow-Origin': hostURL } })\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ allCoordinates: data })\n      })\n      .catch(console.log)\n  }\n\n  // callback for selcting community\n  groupCommunitiesCallbackFunction = (selected) => {\n    this.setState({ selectedGroupCommunity: selected })\n  }\n\n  // callback for choosing pScheduler\n  schedulerCallbackFunction = (selected) => {\n    this.setState({ chosenSchedulers: selected })\n  }\n\n  // update search value on change in search box\n  updateSearch() {\n    this.setState({ searchTerm: document.getElementById(\"searchBar\").value })\n  }\n\n  // update chosen key on selecting key from dropdown\n  keySelect(items) {\n    if (items.length !== 0) {\n      this.setState({ chosenKey: items });\n    } else {\n      this.setState({ chosenKey: \"\" });\n    }\n    var selector = document.getElementById(\"search-input\");\n    selector.value = \"\";\n  }\n\n  // on search button click search api\n  searchHost() {\n    var key = \"\"\n    if (this.state.chosenKey.length !== 0) {\n      key = this.state.chosenKey[0][\"value\"]\n    } else {\n      key = \"\"\n    }\n    if (key !== \"\" & this.state.searchTerm === \"\") {\n      alert(\"Key must have a value specified\")\n    } else if (key === \"\" & this.state.searchTerm !== \"\") {\n      alert(\"Search must have a value specified\")\n    } else if (key === \"\" & this.state.searchTerm === \"\" & this.state.selectedGroupCommunity === \"\" & this.state.chosenSchedulers.length === 0) {\n      alert(\"Please fill in fields before searching\")\n    } else {\n      fetch(serverURL + '/search?key=' + key + \"&groupCommunity=\" + this.state.selectedGroupCommunity + \"&pSchedulers=\" + this.state.chosenSchedulers + \"&searchTerm=\" + this.state.searchTerm + \"&limit=1000\", { headers: { 'Access-Control-Allow-Origin': hostURL } })\n        .then(res => res.json())\n        .then((data) => {\n          this.setState({ hostResults: data })\n        })\n        .catch(console.log)\n      this.setState({ serviceVisibility: true });\n      document.getElementById(\"informationTabs-tab-first\").click();\n    }\n  }\n\n  // on click of host in host table\n  hostTableCallBackFunction = (hostName, latitude, longitude, address) => {\n    this.setState({ serviceVisibility: false });\n    this.setState({ chosenHost: hostName, chosenLat: latitude, chosenLong: longitude, serviceAddress: address }, \n      function () { \n        this.searchService(\"all\") // search for services with all types of servers\n      })\n  }\n\n  // on click of host using map\n  chooseHostFromMap(hostName, type, location, address) {\n    this.setState({ serviceVisibility: false });\n    this.setState({ chosenHost: hostName, chosenLat: location.lat, chosenLong: location.lng, serviceAddress: address }, function () { this.searchService(type) })\n  }\n\n  // search service on choosing a host\n  searchService(type) {\n    fetch(serverURL + '/searchService?hosts=' + this.state.chosenHost + \"&type=\" + type, { headers: { 'Access-Control-Allow-Origin': hostURL } })\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ serviceResults: data })\n      })\n      .catch(console.log)\n    document.getElementById(\"informationTabs-tab-second\").click();\n  }\n\n  // render service table\n  getService(props) {\n    const serviceInformation = props.serviceInformation;\n    const serviceTable = serviceInformation.map((service) =>\n      <tr key={Math.random()} >\n        <td>{service[\"name\"]} - {service[\"type\"]}</td>\n        <td>{this.state.serviceAddress}</td>\n        <td>{this.state.chosenLat} , {this.state.chosenLong}<br /> {service[\"locationString\"]}</td>\n        <td>{service[\"communities\"]}</td>\n        <td>{service[\"version\"]}</td>\n        <td><Button variant=\"warning\" onClick={() => { this.showServiceJSON({ service }) }}>View JSON</Button></td>\n      </tr>\n    );\n    return (\n      <tbody>\n        {serviceTable}\n      </tbody>\n    );\n  }\n\n  // clicking next on host table\n  hostTableNext() {\n    if (this.state.hostResults.length > this.state.tableEnd) {\n      this.setState({ tableEnd: this.state.tableEnd + 10, tableStart: this.state.tableStart + 10 })\n    }\n  }\n\n  // clicking previous on host table\n  hostTablePrev() {\n    if (this.state.tableStart - 10 >= 0) {\n      this.setState({ tableEnd: this.state.tableEnd - 10, tableStart: this.state.tableStart - 10 })\n    }\n  }\n\n  // show json popup for service table\n  showServiceJSON(host) {\n    alert(host[\"service\"][\"JSON\"])\n  }\n\n  // clear all values on clicking clear button\n  clear() {\n    var key = this.state.keys\n    this.setState({\n      selectedGroupCommunity: \"\",\n      chosenSchedulers: [],\n      chosenKey: \"\",\n      searchTerm: \"\",\n      tableStart: 0,\n      tableEnd: 10,\n      hostResults: [],\n      serviceVisibility: true,\n      chosenHost: \"\",\n      serviceResults: [],\n      chosenLat: 0,\n      chosenLong: 0,\n      showMap: true,\n    }, function () {\n      this.setState({ keys: key })\n    })\n    var communityDrop = document.getElementById(\"communitiesdropDown\");\n    communityDrop.textContent = \"Group communities\";\n    var box = document.getElementsByClassName('schedulerCheckBox');\n    for (var i = 0; i < box.length; i++) {\n      if (box[i].type === 'checkbox')\n        box[i].checked = false;\n    }\n\n    var searchBar = document.getElementById(\"searchBar\");\n    searchBar.value = \"\";\n    alert(\"Key needs to be cleared manually\")\n  }\n\n  // chosen values box\n  getChosenValues(props) {\n    return (\n      <div>\n        <p className=\"howToBox\"><b>Key:&nbsp;</b>{(this.state.chosenKey.length > 0) ? this.state.chosenKey[0].value : \"\"} </p>\n        <p className=\"howToBox\"><b>Search:&nbsp;</b> {this.state.searchTerm}</p>\n        <p className=\"howToBox\"><b>Communities:&nbsp;</b>{this.state.selectedGroupCommunity} </p>\n        <p className=\"howToBox\"><b>pScheduler:&nbsp;</b>{props.chosenpSchedulers.toString()}</p>\n      </div>\n    );\n  }\n\n\n\n  render() {\n    return (\n      <div>\n        <Jumbotron className=\"head\">\n          <div className=\"grid-container\">\n            {/* box to show chosen items */}\n            <div className=\"grid-item\" id=\"textBox2\">\n              <br></br>\n              <h5>Chosen values</h5>\n              <ChosenBox \n                chosenpSchedulers={this.state.chosenSchedulers} \n                chosenKey={this.state.chosenKey} \n                searchTerm={this.state.searchTerm} \n                selectedGroupCommunity={this.state.selectedGroupCommunity}>\n              </ChosenBox>\n            </div>\n            <div className=\"grid-item\">\n              <div className=\"inlineSearch\">\n                {/* search box for keys */}\n                <Search \n                  items={this.state.keys}\n                  placeholder=\"key (optional) : \"\n                  maxSelected={1}\n                  multiple={true}\n                  onItemsChanged={this.keySelect.bind(this)}\n                  className=\"searchBarField\"\n                  id=\"keySelector\" />\n                  {/* Search box for values */}\n                <input\n                  type=\"text\" \n                  placeholder=\"Search..\" \n                  className=\"searchBar\"\n                  onChange={this.updateSearch.bind(this)}\n                  id=\"searchBar\" />\n              </div>\n              <div className=\"dropdownDiv\">\n                {/* Group communities dropdown */}\n                <GroupCommunities\n                  communities={this.state.groupCommunities} \n                  parentCallBack={this.groupCommunitiesCallbackFunction} />\n                {/* Pscheduler dropdown */}\n                <Scheduler\n                  pSchedulers={this.state.pSchedulerTests}\n                  parentCallBack={this.schedulerCallbackFunction}\n                  chosenSchedulers={this.state.chosenSchedulers} />\n\n              </div>\n              <div>\n                <div className=\"inlineButtons\">\n                  {/* Button to submit search */}\n                  <Button variant=\"warning\" onClick={() => { this.searchHost() }}>Submit</Button>\n                   {/* Button to clear all fields */}\n                  <Button variant=\"danger\" onClick={() => { this.clear() }} className=\"clearButton\">Clear</Button>\n                </div>\n              </div>\n            </div>\n            <div className=\"grid-item\" id=\"textbox\">\n              {/* How to use box */}\n              <br></br>\n              <h5>How to use the LS Directory</h5>\n              <p className=\"howToBox\"><b>Key:</b> The key signifies the \"key\" in the key-value schema of the database</p>\n              <p className=\"howToBox\"><b>Search:</b> The search is the value needed for the selected key</p>\n              <p className=\"howToBox\"><b>Communities:</b> Filter for the group community value</p>\n              <p className=\"howToBox\"><b>pScheduler:</b> Filter for the pScheduler tests</p>\n            </div>\n          </div>\n\n        </Jumbotron>\n\n        <Tab.Container id=\"informationTabs\" defaultActiveKey=\"first\" className=\"informationTabs\">\n          <Row>\n            {/* Left sidebar */}\n            <Col sm={2}>\n              <Nav variant=\"pills\" className=\"flex-column\">\n                <Nav.Item id=\"hostTab\">\n                  <Nav.Link eventKey=\"first\">Host Information</Nav.Link>\n                </Nav.Item>\n                <Nav.Item id=\"serviceTab\">\n                  <Nav.Link eventKey=\"second\" disabled={this.state.serviceVisibility} >Service Information</Nav.Link>\n                </Nav.Item>\n                <Nav.Item id=\"mapTab\">\n                  <Nav.Link eventKey=\"third\">Map</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Col>\n            {/* Tables and Map */}\n            <Col sm={9}>\n              <Tab.Content>\n                {/* Host table */}\n                <Tab.Pane eventKey=\"first\">\n                  <div className=\"prevNextButton\">\n                    <p \n                      className=\"queryResults\"\n                      hidden={this.state.hostResults.length === 0}>\n                        This query returned {this.state.hostResults.length} results\n                    </p>\n                    {/* previous button */}\n                    <Button\n                      variant=\"info\"\n                      onClick={this.hostTablePrev}\n                      className=\"prevButton\">\n                        Previous\n                    </Button>\n                    {/* next button */}\n                    <Button\n                      variant=\"danger\"\n                      onClick={this.hostTableNext}\n                      className=\"nextButton\">\n                        Next\n                    </Button>\n                  </div>\n\n                  <Table striped bordered hover variant=\"dark\">\n                    <thead>\n                      <tr>\n                        <th>Host Name</th>\n                        <th>Hardware</th>\n                        <th>System Info</th>\n                        <th>Toolkit-Version</th>\n                        <th>Communities</th>\n                        <th>Pscheduler Tests</th>\n                        <th>JSON</th>\n                      </tr>\n                    </thead>\n                    {/* Render host table */}\n                    <HostTable \n                      hostInformation={this.state.hostResults}\n                      parentCallBack={this.hostTableCallBackFunction}\n                      tableStart={this.state.tableStart}\n                      tableEnd={this.state.tableEnd} />\n                  </Table>\n                </Tab.Pane>\n                {/* Service table */}\n                <Tab.Pane eventKey=\"second\">\n                  <Table striped bordered hover variant=\"dark\" >\n                    <thead>\n                      <tr>\n                        <th>Service Name</th>\n                        <th>Address</th>\n                        <th>geographic Location</th>\n                        <th>Communities</th>\n                        <th>Version</th>\n                        <th>JSON</th>\n                      </tr>\n                    </thead>\n                    {/* Render service table */}\n                    <this.getService serviceInformation={this.state.serviceResults} />\n                  </Table>\n                </Tab.Pane>\n                 {/* Map */}\n                <Tab.Pane eventKey=\"third\">\n                  <div className=\"map\">\n                    {/* Rendering the map */}\n                    <Mapper\n                      lat={this.state.chosenLat}\n                      long={this.state.chosenLong}\n                      all={this.state.allCoordinates}\n                      hostResults={this.state.hostResults}\n                      chooseHostCallback={this.chooseHostFromMap}\n                    />\n                  </div>\n                </Tab.Pane>\n              </Tab.Content>\n            </Col>\n          </Row>\n        </Tab.Container>\n      </div>\n    );\n  }\n\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}