{"ast":null,"code":"// Licensed to Elasticsearch B.V under one or more agreements.\n// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.\n// See the LICENSE file in the project root for more information\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nvar _objectWithoutProperties = require(\"/Users/kartik/Desktop/ls_dashboard/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nfunction buildTermvectors(opts) {\n  // eslint-disable-next-line no-unused-vars\n  const makeRequest = opts.makeRequest,\n        ConfigurationError = opts.ConfigurationError,\n        handleError = opts.handleError,\n        snakeCaseKeys = opts.snakeCaseKeys;\n  /**\n   * Perform a [termvectors](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html) request\n   *\n   * @param {string} index - The index in which the document resides.\n   * @param {string} type - The type of the document.\n   * @param {string} id - The id of the document, when not specified a doc param should be supplied.\n   * @param {boolean} term_statistics - Specifies if total term frequency and document frequency should be returned.\n   * @param {boolean} field_statistics - Specifies if document count, sum of document frequencies and sum of total term frequencies should be returned.\n   * @param {list} fields - A comma-separated list of fields to return.\n   * @param {boolean} offsets - Specifies if term offsets should be returned.\n   * @param {boolean} positions - Specifies if term positions should be returned.\n   * @param {boolean} payloads - Specifies if term payloads should be returned.\n   * @param {string} preference - Specify the node or shard the operation should be performed on (default: random).\n   * @param {string} routing - Specific routing value.\n   * @param {boolean} realtime - Specifies if request is real-time as opposed to near-real-time (default: true).\n   * @param {number} version - Explicit version number for concurrency control\n   * @param {enum} version_type - Specific version type\n   * @param {object} body - Define parameters and or supply a document to get termvectors for. See documentation.\n   */\n\n  const acceptedQuerystring = ['term_statistics', 'field_statistics', 'fields', 'offsets', 'positions', 'payloads', 'preference', 'routing', 'realtime', 'version', 'version_type', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\n  const snakeCase = {\n    termStatistics: 'term_statistics',\n    fieldStatistics: 'field_statistics',\n    versionType: 'version_type',\n    errorTrace: 'error_trace',\n    filterPath: 'filter_path'\n  };\n  return function termvectors(params, options, callback) {\n    options = options || {};\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof params === 'function' || params == null) {\n      callback = params;\n      params = {};\n      options = {};\n    } // check required parameters\n\n\n    if (params['index'] == null) {\n      const err = new ConfigurationError('Missing required parameter: index');\n      return handleError(err, callback);\n    } // validate headers object\n\n\n    if (options.headers != null && typeof options.headers !== 'object') {\n      const err = new ConfigurationError(\"Headers should be an object, instead got: \".concat(typeof options.headers));\n      return handleError(err, callback);\n    }\n\n    var warnings = [];\n\n    var _params = params,\n        method = _params.method,\n        body = _params.body,\n        index = _params.index,\n        type = _params.type,\n        id = _params.id,\n        querystring = _objectWithoutProperties(_params, [\"method\", \"body\", \"index\", \"type\", \"id\"]);\n\n    querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring, warnings);\n\n    if (method == null) {\n      method = body == null ? 'GET' : 'POST';\n    }\n\n    var ignore = options.ignore;\n\n    if (typeof ignore === 'number') {\n      options.ignore = [ignore];\n    }\n\n    var path = '';\n\n    if (index != null && type != null && id != null) {\n      path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id) + '/' + '_termvectors';\n    } else if (index != null && id != null) {\n      path = '/' + encodeURIComponent(index) + '/' + '_termvectors' + '/' + encodeURIComponent(id);\n    } else if (index != null && type != null) {\n      path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_termvectors';\n    } else {\n      path = '/' + encodeURIComponent(index) + '/' + '_termvectors';\n    } // build request object\n\n\n    const request = {\n      method,\n      path,\n      body: body || '',\n      querystring\n    };\n    options.warnings = warnings.length === 0 ? null : warnings;\n    return makeRequest(request, options, callback);\n  };\n}\n\nmodule.exports = buildTermvectors;","map":null,"metadata":{},"sourceType":"script"}