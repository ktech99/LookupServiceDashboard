{"ast":null,"code":"// Licensed to Elasticsearch B.V under one or more agreements.\n// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.\n// See the LICENSE file in the project root for more information\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nvar _objectWithoutProperties = require(\"/Users/kartik/Desktop/ls_dashboard/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nfunction buildUpdateByQuery(opts) {\n  // eslint-disable-next-line no-unused-vars\n  const makeRequest = opts.makeRequest,\n        ConfigurationError = opts.ConfigurationError,\n        handleError = opts.handleError,\n        snakeCaseKeys = opts.snakeCaseKeys;\n  /**\n   * Perform a [update_by_query](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update-by-query.html) request\n   *\n   * @param {list} index - A comma-separated list of index names to search; use `_all` or empty string to perform the operation on all indices\n   * @param {list} type - A comma-separated list of document types to search; leave empty to perform the operation on all types\n   * @param {string} analyzer - The analyzer to use for the query string\n   * @param {boolean} analyze_wildcard - Specify whether wildcard and prefix queries should be analyzed (default: false)\n   * @param {enum} default_operator - The default operator for query string query (AND or OR)\n   * @param {string} df - The field to use as default where no field prefix is given in the query string\n   * @param {number} from - Starting offset (default: 0)\n   * @param {boolean} ignore_unavailable - Whether specified concrete indices should be ignored when unavailable (missing or closed)\n   * @param {boolean} allow_no_indices - Whether to ignore if a wildcard indices expression resolves into no concrete indices. (This includes `_all` string or when no indices have been specified)\n   * @param {enum} conflicts - What to do when the update by query hits version conflicts?\n   * @param {enum} expand_wildcards - Whether to expand wildcard expression to concrete indices that are open, closed or both.\n   * @param {boolean} lenient - Specify whether format-based query failures (such as providing text to a numeric field) should be ignored\n   * @param {string} pipeline - Ingest pipeline to set on index requests made by this action. (default: none)\n   * @param {string} preference - Specify the node or shard the operation should be performed on (default: random)\n   * @param {string} q - Query in the Lucene query string syntax\n   * @param {list} routing - A comma-separated list of specific routing values\n   * @param {time} scroll - Specify how long a consistent view of the index should be maintained for scrolled search\n   * @param {enum} search_type - Search operation type\n   * @param {time} search_timeout - Explicit timeout for each search request. Defaults to no timeout.\n   * @param {number} size - Deprecated, please use `max_docs` instead\n   * @param {number} max_docs - Maximum number of documents to process (default: all documents)\n   * @param {list} sort - A comma-separated list of <field>:<direction> pairs\n   * @param {list} _source - True or false to return the _source field or not, or a list of fields to return\n   * @param {list} _source_excludes - A list of fields to exclude from the returned _source field\n   * @param {list} _source_includes - A list of fields to extract and return from the _source field\n   * @param {number} terminate_after - The maximum number of documents to collect for each shard, upon reaching which the query execution will terminate early.\n   * @param {list} stats - Specific 'tag' of the request for logging and statistical purposes\n   * @param {boolean} version - Specify whether to return document version as part of a hit\n   * @param {boolean} version_type - Should the document increment the version number (internal) on hit or not (reindex)\n   * @param {boolean} request_cache - Specify if request cache should be used for this request or not, defaults to index level setting\n   * @param {boolean} refresh - Should the effected indexes be refreshed?\n   * @param {time} timeout - Time each individual bulk request should wait for shards that are unavailable.\n   * @param {string} wait_for_active_shards - Sets the number of shard copies that must be active before proceeding with the update by query operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n   * @param {number} scroll_size - Size on the scroll request powering the update by query\n   * @param {boolean} wait_for_completion - Should the request should block until the update by query operation is complete.\n   * @param {number} requests_per_second - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n   * @param {number} slices - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n   * @param {object} body - The search definition using the Query DSL\n   */\n\n  const acceptedQuerystring = ['analyzer', 'analyze_wildcard', 'default_operator', 'df', 'from', 'ignore_unavailable', 'allow_no_indices', 'conflicts', 'expand_wildcards', 'lenient', 'pipeline', 'preference', 'q', 'routing', 'scroll', 'search_type', 'search_timeout', 'size', 'max_docs', 'sort', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'terminate_after', 'stats', 'version', 'version_type', 'request_cache', 'refresh', 'timeout', 'wait_for_active_shards', 'scroll_size', 'wait_for_completion', 'requests_per_second', 'slices', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\n  const snakeCase = {\n    analyzeWildcard: 'analyze_wildcard',\n    defaultOperator: 'default_operator',\n    ignoreUnavailable: 'ignore_unavailable',\n    allowNoIndices: 'allow_no_indices',\n    expandWildcards: 'expand_wildcards',\n    searchType: 'search_type',\n    searchTimeout: 'search_timeout',\n    maxDocs: 'max_docs',\n    _sourceExcludes: '_source_excludes',\n    _sourceExclude: '_source_exclude',\n    _sourceIncludes: '_source_includes',\n    _sourceInclude: '_source_include',\n    terminateAfter: 'terminate_after',\n    versionType: 'version_type',\n    requestCache: 'request_cache',\n    waitForActiveShards: 'wait_for_active_shards',\n    scrollSize: 'scroll_size',\n    waitForCompletion: 'wait_for_completion',\n    requestsPerSecond: 'requests_per_second',\n    errorTrace: 'error_trace',\n    filterPath: 'filter_path'\n  };\n  return function updateByQuery(params, options, callback) {\n    options = options || {};\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof params === 'function' || params == null) {\n      callback = params;\n      params = {};\n      options = {};\n    } // check required parameters\n\n\n    if (params['index'] == null) {\n      const err = new ConfigurationError('Missing required parameter: index');\n      return handleError(err, callback);\n    } // check required url components\n\n\n    if (params['type'] != null && params['index'] == null) {\n      const err = new ConfigurationError('Missing required parameter of the url: index');\n      return handleError(err, callback);\n    } // validate headers object\n\n\n    if (options.headers != null && typeof options.headers !== 'object') {\n      const err = new ConfigurationError(\"Headers should be an object, instead got: \".concat(typeof options.headers));\n      return handleError(err, callback);\n    }\n\n    var warnings = [];\n\n    var _params = params,\n        method = _params.method,\n        body = _params.body,\n        index = _params.index,\n        type = _params.type,\n        querystring = _objectWithoutProperties(_params, [\"method\", \"body\", \"index\", \"type\"]);\n\n    querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring, warnings);\n\n    if (method == null) {\n      method = 'POST';\n    }\n\n    var ignore = options.ignore;\n\n    if (typeof ignore === 'number') {\n      options.ignore = [ignore];\n    }\n\n    var path = '';\n\n    if (index != null && type != null) {\n      path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_update_by_query';\n    } else {\n      path = '/' + encodeURIComponent(index) + '/' + '_update_by_query';\n    } // build request object\n\n\n    const request = {\n      method,\n      path,\n      body: body || '',\n      querystring\n    };\n    options.warnings = warnings.length === 0 ? null : warnings;\n    return makeRequest(request, options, callback);\n  };\n}\n\nmodule.exports = buildUpdateByQuery;","map":null,"metadata":{},"sourceType":"script"}