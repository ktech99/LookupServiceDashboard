{"ast":null,"code":"// Licensed to Elasticsearch B.V under one or more agreements.\n// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.\n// See the LICENSE file in the project root for more information\n'use strict';\n\nclass ElasticsearchClientError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'ElasticsearchClientError';\n  }\n\n}\n\nclass TimeoutError extends ElasticsearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, TimeoutError);\n    this.name = 'TimeoutError';\n    this.message = message || 'Timeout Error';\n    this.meta = meta;\n  }\n\n}\n\nclass ConnectionError extends ElasticsearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, ConnectionError);\n    this.name = 'ConnectionError';\n    this.message = message || 'Connection Error';\n    this.meta = meta;\n  }\n\n}\n\nclass NoLivingConnectionsError extends ElasticsearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, NoLivingConnectionsError);\n    this.name = 'NoLivingConnectionsError';\n    this.message = message || 'No Living Connections Error';\n    this.meta = meta;\n  }\n\n}\n\nclass SerializationError extends ElasticsearchClientError {\n  constructor(message) {\n    super(message);\n    Error.captureStackTrace(this, SerializationError);\n    this.name = 'SerializationError';\n    this.message = message || 'Serialization Error';\n  }\n\n}\n\nclass DeserializationError extends ElasticsearchClientError {\n  constructor(message) {\n    super(message);\n    Error.captureStackTrace(this, DeserializationError);\n    this.name = 'DeserializationError';\n    this.message = message || 'Deserialization Error';\n  }\n\n}\n\nclass ConfigurationError extends ElasticsearchClientError {\n  constructor(message) {\n    super(message);\n    Error.captureStackTrace(this, ConfigurationError);\n    this.name = 'ConfigurationError';\n    this.message = message || 'Configuration Error';\n  }\n\n}\n\nclass ResponseError extends ElasticsearchClientError {\n  constructor(meta) {\n    super('Response Error');\n    Error.captureStackTrace(this, ResponseError);\n    this.name = 'ResponseError';\n    this.message = meta.body && meta.body.error && meta.body.error.type || 'Response Error';\n    this.meta = meta;\n  }\n\n  get body() {\n    return this.meta.body;\n  }\n\n  get statusCode() {\n    if (this.meta.body && typeof this.meta.body.status === 'number') {\n      return this.meta.body.status;\n    }\n\n    return this.meta.statusCode;\n  }\n\n  get headers() {\n    return this.meta.headers;\n  }\n\n}\n\nmodule.exports = {\n  ElasticsearchClientError,\n  TimeoutError,\n  ConnectionError,\n  NoLivingConnectionsError,\n  SerializationError,\n  DeserializationError,\n  ConfigurationError,\n  ResponseError\n};","map":null,"metadata":{},"sourceType":"script"}