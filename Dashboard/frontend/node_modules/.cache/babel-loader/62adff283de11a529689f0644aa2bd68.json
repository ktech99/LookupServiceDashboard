{"ast":null,"code":"var _jsxFileName = \"/Users/kartik/Desktop/ls_dashboard/src/components/App.js\";\nimport React, { Component } from 'react';\nimport '../styles/App.css';\nimport logo from \"../image/Logo.png\";\nimport { Jumbotron, Button, ListGroup, Dropdown, ButtonToolbar } from 'react-bootstrap';\nimport Search from \"react-search\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      groupCommunities: [],\n      selectedGroupCommunity: \"\",\n      pSchedulerTests: [],\n      chosenSchedulers: [],\n      keys: []\n    };\n    this.getCommunities = this.getCommunities.bind(this);\n    this.getPschedulers = this.getPschedulers.bind(this);\n  }\n\n  HiItems(items) {\n    console.log(items);\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:8080/groupCommunities', {\n      headers: {\n        'Access-Control-Allow-Origin': \"http://127.0.0.1:3000\"\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        groupCommunities: data\n      });\n    }).catch(console.log);\n    fetch('http://localhost:8080/pSchedulerTests', {\n      headers: {\n        'Access-Control-Allow-Origin': \"http://127.0.0.1:3000\"\n      }\n    }).then(res => res.json()).then(data => {\n      this.setState({\n        pSchedulerTests: data\n      });\n    }).catch(console.log);\n    fetch('http://localhost:8080/getAllKeys', {\n      headers: {\n        'Access-Control-Allow-Origin': \"http://127.0.0.1:3000\"\n      }\n    }).then(res => res.json()).then(data => {\n      data = data.map(value, i => ({\n        id: i,\n        value: value\n      }));\n      this.setState({\n        keys: data\n      });\n    }).catch(console.log);\n  }\n\n  getCommunities(props) {\n    const communities = props.communities;\n    const listCommunities = communities.map(community => React.createElement(Dropdown.Item, {\n      id: community,\n      key: community,\n      as: Button,\n      onClick: () => {\n        var current = document.getElementById(\"communitiesdropDown\");\n        current.textContent = {\n          community\n        }.community; // changing dropdown name\n\n        this.setState({\n          selectedGroupCommunity: {\n            community\n          }.community\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, community));\n    return React.createElement(Dropdown.Menu, {\n      className: \"scrollBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, listCommunities);\n  }\n\n  getPschedulers(props) {\n    const pSchedulers = props.pSchedulers;\n    const listSchedulers = pSchedulers.map(scheduler => React.createElement(\"label\", {\n      key: scheduler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      className: \"schedulerCheckBox\",\n      id: scheduler,\n      onClick: () => {\n        console.log(this.state.chosenSchedulers);\n        const contains = this.state.chosenSchedulers.includes({\n          scheduler\n        }.scheduler);\n\n        if (contains) {\n          var remainingItems = this.state.chosenSchedulers.filter(function (scheduler) {\n            return scheduler !== {\n              scheduler\n            }.scheduler;\n          });\n          this.setState({\n            chosenSchedulers: remainingItems\n          });\n        } else {\n          this.state.chosenSchedulers.push({\n            scheduler\n          }.scheduler);\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), scheduler));\n    return React.createElement(Dropdown.Menu, {\n      className: \"scrollBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, listSchedulers);\n  }\n\n  render() {\n    return React.createElement(Jumbotron, {\n      className: \"head\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Search, {\n      items: this.state.keys,\n      placeholder: \"Eneter a key (optional) : \",\n      maxSelected: 1,\n      multiple: true,\n      onItemsChanged: this.HiItems.bind(this),\n      className: \"searchBarField\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Search..\",\n      className: \"searchBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"dropdownDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      className: \"dropdownDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Dropdown.Toggle, {\n      variant: \"dark\",\n      id: \"communitiesdropDown\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Group communities\"), React.createElement(this.getCommunities, {\n      communities: this.state.groupCommunities,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    })), React.createElement(Dropdown, {\n      className: \"dropdownDiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Dropdown.Toggle, {\n      variant: \"dark\",\n      id: \"dropdown-basic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"pScheduler Tests\"), React.createElement(this.getPschedulers, {\n      pSchedulers: this.state.pSchedulerTests,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"submitButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Button, {\n      variant: \"warning\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Submit\")));\n  }\n\n}\n\n;\nexport default App;","map":{"version":3,"sources":["/Users/kartik/Desktop/ls_dashboard/src/components/App.js"],"names":["React","Component","logo","Jumbotron","Button","ListGroup","Dropdown","ButtonToolbar","Search","App","constructor","state","groupCommunities","selectedGroupCommunity","pSchedulerTests","chosenSchedulers","keys","getCommunities","bind","getPschedulers","HiItems","items","console","log","componentDidMount","fetch","headers","then","res","json","data","setState","catch","map","value","i","id","props","communities","listCommunities","community","current","document","getElementById","textContent","pSchedulers","listSchedulers","scheduler","contains","includes","remainingItems","filter","push","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/App.css';\nimport logo from \"../image/Logo.png\";\nimport { Jumbotron, Button, ListGroup, Dropdown, ButtonToolbar } from 'react-bootstrap'\nimport Search from \"react-search\"\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      groupCommunities: [],\n      selectedGroupCommunity: \"\",\n      pSchedulerTests: [],\n      chosenSchedulers: [],\n      keys: []\n    }\n    this.getCommunities = this.getCommunities.bind(this);\n    this.getPschedulers = this.getPschedulers.bind(this);\n  }\n\n  HiItems(items) {\n    console.log(items)\n  }\n\n  componentDidMount() {\n\n    fetch('http://localhost:8080/groupCommunities', { headers: { 'Access-Control-Allow-Origin': \"http://127.0.0.1:3000\" } })\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ groupCommunities: data })\n      })\n      .catch(console.log)\n\n    fetch('http://localhost:8080/pSchedulerTests', { headers: { 'Access-Control-Allow-Origin': \"http://127.0.0.1:3000\" } })\n      .then(res => res.json())\n      .then((data) => {\n        this.setState({ pSchedulerTests: data })\n      })\n      .catch(console.log)\n\n      fetch('http://localhost:8080/getAllKeys', { headers: { 'Access-Control-Allow-Origin': \"http://127.0.0.1:3000\" } })\n      .then(res => res.json())\n      .then((data) => {\n        data = data.map(value, i => ({ id : i, value: value }))      \n        this.setState({keys: data })\n      })\n      .catch(console.log)\n  }\n\n  getCommunities(props) {\n    const communities = props.communities;\n    const listCommunities = communities.map((community) =>\n      <Dropdown.Item id={community} key={community} as={Button}\n        onClick={() => {\n          var current = document.getElementById(\"communitiesdropDown\");\n          current.textContent = { community }.community; // changing dropdown name\n          this.setState({ selectedGroupCommunity: { community }.community })\n        }}>\n        {/* todo onclick */}\n        {community}\n\n      </Dropdown.Item>\n    );\n    return (\n      <Dropdown.Menu className=\"scrollBox\">{listCommunities}</Dropdown.Menu>\n    );\n  }\n\n  getPschedulers(props) {\n    const pSchedulers = props.pSchedulers;\n    const listSchedulers = pSchedulers.map((scheduler) =>\n      <label key={scheduler}>\n        <input type=\"checkbox\" className=\"schedulerCheckBox\" id={scheduler} onClick={() => {\n          console.log(this.state.chosenSchedulers);\n          const contains = this.state.chosenSchedulers.includes({ scheduler }.scheduler);\n          if (contains) {\n            var remainingItems = this.state.chosenSchedulers.filter(function (scheduler) { return scheduler !== { scheduler }.scheduler });\n            this.setState({ chosenSchedulers: remainingItems });\n          } else {\n            this.state.chosenSchedulers.push({ scheduler }.scheduler)\n          }\n\n        }}>\n        </input>\n        {scheduler}\n      </label>\n    );\n    return (\n      <Dropdown.Menu className=\"scrollBox\">\n        {listSchedulers}\n      </Dropdown.Menu>\n    );\n  }\n\n\n  render() {\n    return (\n      <Jumbotron className=\"head\">\n        <div>\n          <Search items={this.state.keys}\n            placeholder=\"Eneter a key (optional) : \"\n            maxSelected={1}\n            multiple={true}\n            onItemsChanged={this.HiItems.bind(this)} className=\"searchBarField\" />\n\n          {/* <input type=\"text\" placeholder=\"Field Name..\" className=\"searchBarField\" /> */}\n          <input type=\"text\" placeholder=\"Search..\" className=\"searchBar\" />\n        </div>\n        <div className=\"dropdownDiv\">\n          <Dropdown className=\"dropdownDiv\">\n            <Dropdown.Toggle variant=\"dark\" id=\"communitiesdropDown\">\n              Group communities\n            </Dropdown.Toggle>\n            <this.getCommunities communities={this.state.groupCommunities} />\n          </Dropdown>\n\n          <Dropdown className=\"dropdownDiv\">\n            <Dropdown.Toggle variant=\"dark\" id=\"dropdown-basic\">\n              pScheduler Tests\n            </Dropdown.Toggle>\n\n            <this.getPschedulers pSchedulers={this.state.pSchedulerTests} />\n\n          </Dropdown>\n        </div>\n        <div className=\"submitButton\">\n          <Button variant=\"warning\">Submit</Button>\n        </div>\n      </Jumbotron>\n    );\n  }\n\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}