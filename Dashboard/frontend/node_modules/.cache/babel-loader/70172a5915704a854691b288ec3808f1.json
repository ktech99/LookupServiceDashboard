{"ast":null,"code":"// Licensed to Elasticsearch B.V under one or more agreements.\n// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.\n// See the LICENSE file in the project root for more information\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nvar _objectWithoutProperties = require(\"/Users/kartik/Desktop/ls_dashboard/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nfunction buildMlFindFileStructure(opts) {\n  // eslint-disable-next-line no-unused-vars\n  const makeRequest = opts.makeRequest,\n        ConfigurationError = opts.ConfigurationError,\n        handleError = opts.handleError,\n        snakeCaseKeys = opts.snakeCaseKeys;\n  /**\n   * Perform a [ml.find_file_structure](http://www.elastic.co/guide/en/elasticsearch/reference/current/ml-find-file-structure.html) request\n   *\n   * @param {int} lines_to_sample - How many lines of the file should be included in the analysis\n   * @param {int} line_merge_size_limit - Maximum number of characters permitted in a single message when lines are merged to create messages.\n   * @param {time} timeout - Timeout after which the analysis will be aborted\n   * @param {string} charset - Optional parameter to specify the character set of the file\n   * @param {enum} format - Optional parameter to specify the high level file format\n   * @param {boolean} has_header_row - Optional parameter to specify whether a delimited file includes the column names in its first row\n   * @param {list} column_names - Optional parameter containing a comma separated list of the column names for a delimited file\n   * @param {string} delimiter - Optional parameter to specify the delimiter character for a delimited file - must be a single character\n   * @param {string} quote - Optional parameter to specify the quote character for a delimited file - must be a single character\n   * @param {boolean} should_trim_fields - Optional parameter to specify whether the values between delimiters in a delimited file should have whitespace trimmed from them\n   * @param {string} grok_pattern - Optional parameter to specify the Grok pattern that should be used to extract fields from messages in a semi-structured text file\n   * @param {string} timestamp_field - Optional parameter to specify the timestamp field in the file\n   * @param {string} timestamp_format - Optional parameter to specify the timestamp format in the file - may be either a Joda or Java time format\n   * @param {boolean} explain - Whether to include a commentary on how the structure was derived\n   * @param {object} body - The contents of the file to be analyzed\n   */\n\n  const acceptedQuerystring = ['lines_to_sample', 'line_merge_size_limit', 'timeout', 'charset', 'format', 'has_header_row', 'column_names', 'delimiter', 'quote', 'should_trim_fields', 'grok_pattern', 'timestamp_field', 'timestamp_format', 'explain'];\n  const snakeCase = {\n    linesToSample: 'lines_to_sample',\n    lineMergeSizeLimit: 'line_merge_size_limit',\n    hasHeaderRow: 'has_header_row',\n    columnNames: 'column_names',\n    shouldTrimFields: 'should_trim_fields',\n    grokPattern: 'grok_pattern',\n    timestampField: 'timestamp_field',\n    timestampFormat: 'timestamp_format'\n  };\n  return function mlFindFileStructure(params, options, callback) {\n    options = options || {};\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof params === 'function' || params == null) {\n      callback = params;\n      params = {};\n      options = {};\n    } // check required parameters\n\n\n    if (params['body'] == null) {\n      const err = new ConfigurationError('Missing required parameter: body');\n      return handleError(err, callback);\n    } // validate headers object\n\n\n    if (options.headers != null && typeof options.headers !== 'object') {\n      const err = new ConfigurationError(\"Headers should be an object, instead got: \".concat(typeof options.headers));\n      return handleError(err, callback);\n    }\n\n    var warnings = [];\n\n    var _params = params,\n        method = _params.method,\n        body = _params.body,\n        querystring = _objectWithoutProperties(_params, [\"method\", \"body\"]);\n\n    querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring, warnings);\n\n    if (method == null) {\n      method = 'POST';\n    }\n\n    var ignore = options.ignore;\n\n    if (typeof ignore === 'number') {\n      options.ignore = [ignore];\n    }\n\n    var path = '';\n    path = '/' + '_ml' + '/' + 'find_file_structure'; // build request object\n\n    const request = {\n      method,\n      path,\n      bulkBody: body,\n      querystring\n    };\n    options.warnings = warnings.length === 0 ? null : warnings;\n    return makeRequest(request, options, callback);\n  };\n}\n\nmodule.exports = buildMlFindFileStructure;","map":null,"metadata":{},"sourceType":"script"}