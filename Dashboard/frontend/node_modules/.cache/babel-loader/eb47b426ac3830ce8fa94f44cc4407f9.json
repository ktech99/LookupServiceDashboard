{"ast":null,"code":"// Licensed to Elasticsearch B.V under one or more agreements.\n// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.\n// See the LICENSE file in the project root for more information\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nvar _objectWithoutProperties = require(\"/Users/kartik/Desktop/ls_dashboard/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nfunction buildNodesStats(opts) {\n  // eslint-disable-next-line no-unused-vars\n  const makeRequest = opts.makeRequest,\n        ConfigurationError = opts.ConfigurationError,\n        handleError = opts.handleError,\n        snakeCaseKeys = opts.snakeCaseKeys;\n  /**\n   * Perform a [nodes.stats](http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html) request\n   *\n   * @param {list} metric - Limit the information returned to the specified metrics\n   * @param {list} index_metric - Limit the information returned for `indices` metric to the specific index metrics. Isn't used if `indices` (or `all`) metric isn't specified.\n   * @param {list} node_id - A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you're connecting to, leave empty to get information from all nodes\n   * @param {list} completion_fields - A comma-separated list of fields for `fielddata` and `suggest` index metric (supports wildcards)\n   * @param {list} fielddata_fields - A comma-separated list of fields for `fielddata` index metric (supports wildcards)\n   * @param {list} fields - A comma-separated list of fields for `fielddata` and `completion` index metric (supports wildcards)\n   * @param {boolean} groups - A comma-separated list of search groups for `search` index metric\n   * @param {enum} level - Return indices stats aggregated at index, node or shard level\n   * @param {list} types - A comma-separated list of document types for the `indexing` index metric\n   * @param {time} timeout - Explicit operation timeout\n   * @param {boolean} include_segment_file_sizes - Whether to report the aggregated disk usage of each one of the Lucene index files (only applies if segment stats are requested)\n   */\n\n  const acceptedQuerystring = ['completion_fields', 'fielddata_fields', 'fields', 'groups', 'level', 'types', 'timeout', 'include_segment_file_sizes', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\n  const snakeCase = {\n    completionFields: 'completion_fields',\n    fielddataFields: 'fielddata_fields',\n    includeSegmentFileSizes: 'include_segment_file_sizes',\n    errorTrace: 'error_trace',\n    filterPath: 'filter_path'\n  };\n  return function nodesStats(params, options, callback) {\n    options = options || {};\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof params === 'function' || params == null) {\n      callback = params;\n      params = {};\n      options = {};\n    } // check required parameters\n\n\n    if (params.body != null) {\n      const err = new ConfigurationError('This API does not require a body');\n      return handleError(err, callback);\n    } // validate headers object\n\n\n    if (options.headers != null && typeof options.headers !== 'object') {\n      const err = new ConfigurationError(\"Headers should be an object, instead got: \".concat(typeof options.headers));\n      return handleError(err, callback);\n    }\n\n    var warnings = [];\n\n    var _params = params,\n        method = _params.method,\n        body = _params.body,\n        metric = _params.metric,\n        indexMetric = _params.indexMetric,\n        index_metric = _params.index_metric,\n        nodeId = _params.nodeId,\n        node_id = _params.node_id,\n        querystring = _objectWithoutProperties(_params, [\"method\", \"body\", \"metric\", \"indexMetric\", \"index_metric\", \"nodeId\", \"node_id\"]);\n\n    querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring, warnings);\n\n    if (method == null) {\n      method = 'GET';\n    }\n\n    var ignore = options.ignore;\n\n    if (typeof ignore === 'number') {\n      options.ignore = [ignore];\n    }\n\n    var path = '';\n\n    if ((node_id || nodeId) != null && metric != null && (index_metric || indexMetric) != null) {\n      path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'stats' + '/' + encodeURIComponent(metric) + '/' + encodeURIComponent(index_metric || indexMetric);\n    } else if ((node_id || nodeId) != null && metric != null) {\n      path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'stats' + '/' + encodeURIComponent(metric);\n    } else if (metric != null && (index_metric || indexMetric) != null) {\n      path = '/' + '_nodes' + '/' + 'stats' + '/' + encodeURIComponent(metric) + '/' + encodeURIComponent(index_metric || indexMetric);\n    } else if ((node_id || nodeId) != null) {\n      path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'stats';\n    } else if (metric != null) {\n      path = '/' + '_nodes' + '/' + 'stats' + '/' + encodeURIComponent(metric);\n    } else {\n      path = '/' + '_nodes' + '/' + 'stats';\n    } // build request object\n\n\n    const request = {\n      method,\n      path,\n      body: null,\n      querystring\n    };\n    options.warnings = warnings.length === 0 ? null : warnings;\n    return makeRequest(request, options, callback);\n  };\n}\n\nmodule.exports = buildNodesStats;","map":null,"metadata":{},"sourceType":"script"}