{"ast":null,"code":"// Licensed to Elasticsearch B.V under one or more agreements.\n// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.\n// See the LICENSE file in the project root for more information\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nvar _objectWithoutProperties = require(\"/Users/kartik/Desktop/ls_dashboard/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nfunction buildReindex(opts) {\n  // eslint-disable-next-line no-unused-vars\n  const makeRequest = opts.makeRequest,\n        ConfigurationError = opts.ConfigurationError,\n        handleError = opts.handleError,\n        snakeCaseKeys = opts.snakeCaseKeys;\n  /**\n   * Perform a [reindex](https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-reindex.html) request\n   *\n   * @param {boolean} refresh - Should the effected indexes be refreshed?\n   * @param {time} timeout - Time each individual bulk request should wait for shards that are unavailable.\n   * @param {string} wait_for_active_shards - Sets the number of shard copies that must be active before proceeding with the reindex operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n   * @param {boolean} wait_for_completion - Should the request should block until the reindex is complete.\n   * @param {number} requests_per_second - The throttle to set on this request in sub-requests per second. -1 means no throttle.\n   * @param {time} scroll - Control how long to keep the search context alive\n   * @param {number} slices - The number of slices this task should be divided into. Defaults to 1 meaning the task isn't sliced into subtasks.\n   * @param {number} max_docs - Maximum number of documents to process (default: all documents)\n   * @param {object} body - The search definition using the Query DSL and the prototype for the index request.\n   */\n\n  const acceptedQuerystring = ['refresh', 'timeout', 'wait_for_active_shards', 'wait_for_completion', 'requests_per_second', 'scroll', 'slices', 'max_docs', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\n  const snakeCase = {\n    waitForActiveShards: 'wait_for_active_shards',\n    waitForCompletion: 'wait_for_completion',\n    requestsPerSecond: 'requests_per_second',\n    maxDocs: 'max_docs',\n    errorTrace: 'error_trace',\n    filterPath: 'filter_path'\n  };\n  return function reindex(params, options, callback) {\n    options = options || {};\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof params === 'function' || params == null) {\n      callback = params;\n      params = {};\n      options = {};\n    } // check required parameters\n\n\n    if (params['body'] == null) {\n      const err = new ConfigurationError('Missing required parameter: body');\n      return handleError(err, callback);\n    } // validate headers object\n\n\n    if (options.headers != null && typeof options.headers !== 'object') {\n      const err = new ConfigurationError(\"Headers should be an object, instead got: \".concat(typeof options.headers));\n      return handleError(err, callback);\n    }\n\n    var warnings = [];\n\n    var _params = params,\n        method = _params.method,\n        body = _params.body,\n        querystring = _objectWithoutProperties(_params, [\"method\", \"body\"]);\n\n    querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring, warnings);\n\n    if (method == null) {\n      method = 'POST';\n    }\n\n    var ignore = options.ignore;\n\n    if (typeof ignore === 'number') {\n      options.ignore = [ignore];\n    }\n\n    var path = '';\n    path = '/' + '_reindex'; // build request object\n\n    const request = {\n      method,\n      path,\n      body: body || '',\n      querystring\n    };\n    options.warnings = warnings.length === 0 ? null : warnings;\n    return makeRequest(request, options, callback);\n  };\n}\n\nmodule.exports = buildReindex;","map":null,"metadata":{},"sourceType":"script"}