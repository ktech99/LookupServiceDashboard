{"ast":null,"code":"// Licensed to Elasticsearch B.V under one or more agreements.\n// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.\n// See the LICENSE file in the project root for more information\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nvar _objectWithoutProperties = require(\"/Users/kartik/Desktop/ls_dashboard/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nfunction buildUpdate(opts) {\n  // eslint-disable-next-line no-unused-vars\n  const makeRequest = opts.makeRequest,\n        ConfigurationError = opts.ConfigurationError,\n        handleError = opts.handleError,\n        snakeCaseKeys = opts.snakeCaseKeys;\n  /**\n   * Perform a [update](http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update.html) request\n   *\n   * @param {string} id - Document ID\n   * @param {string} index - The name of the index\n   * @param {string} type - The type of the document\n   * @param {string} wait_for_active_shards - Sets the number of shard copies that must be active before proceeding with the update operation. Defaults to 1, meaning the primary shard only. Set to `all` for all shard copies, otherwise set to any non-negative value less than or equal to the total number of copies for the shard (number of replicas + 1)\n   * @param {list} _source - True or false to return the _source field or not, or a list of fields to return\n   * @param {list} _source_excludes - A list of fields to exclude from the returned _source field\n   * @param {list} _source_includes - A list of fields to extract and return from the _source field\n   * @param {string} lang - The script language (default: painless)\n   * @param {enum} refresh - If `true` then refresh the effected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` (the default) then do nothing with refreshes.\n   * @param {number} retry_on_conflict - Specify how many times should the operation be retried when a conflict occurs (default: 0)\n   * @param {string} routing - Specific routing value\n   * @param {time} timeout - Explicit operation timeout\n   * @param {number} if_seq_no - only perform the update operation if the last operation that has changed the document has the specified sequence number\n   * @param {number} if_primary_term - only perform the update operation if the last operation that has changed the document has the specified primary term\n   * @param {object} body - The request definition requires either `script` or partial `doc`\n   */\n\n  const acceptedQuerystring = ['wait_for_active_shards', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'lang', 'refresh', 'retry_on_conflict', 'routing', 'timeout', 'if_seq_no', 'if_primary_term', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\n  const snakeCase = {\n    waitForActiveShards: 'wait_for_active_shards',\n    _sourceExcludes: '_source_excludes',\n    _sourceExclude: '_source_exclude',\n    _sourceIncludes: '_source_includes',\n    _sourceInclude: '_source_include',\n    retryOnConflict: 'retry_on_conflict',\n    ifSeqNo: 'if_seq_no',\n    ifPrimaryTerm: 'if_primary_term',\n    errorTrace: 'error_trace',\n    filterPath: 'filter_path'\n  };\n  return function update(params, options, callback) {\n    options = options || {};\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof params === 'function' || params == null) {\n      callback = params;\n      params = {};\n      options = {};\n    } // check required parameters\n\n\n    if (params['id'] == null) {\n      const err = new ConfigurationError('Missing required parameter: id');\n      return handleError(err, callback);\n    }\n\n    if (params['index'] == null) {\n      const err = new ConfigurationError('Missing required parameter: index');\n      return handleError(err, callback);\n    }\n\n    if (params['body'] == null) {\n      const err = new ConfigurationError('Missing required parameter: body');\n      return handleError(err, callback);\n    } // validate headers object\n\n\n    if (options.headers != null && typeof options.headers !== 'object') {\n      const err = new ConfigurationError(\"Headers should be an object, instead got: \".concat(typeof options.headers));\n      return handleError(err, callback);\n    }\n\n    var warnings = [];\n\n    var _params = params,\n        method = _params.method,\n        body = _params.body,\n        id = _params.id,\n        index = _params.index,\n        type = _params.type,\n        querystring = _objectWithoutProperties(_params, [\"method\", \"body\", \"id\", \"index\", \"type\"]);\n\n    querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring, warnings);\n\n    if (method == null) {\n      method = 'POST';\n    }\n\n    var ignore = options.ignore;\n\n    if (typeof ignore === 'number') {\n      options.ignore = [ignore];\n    }\n\n    var path = '';\n\n    if (index != null && type != null && id != null) {\n      path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id) + '/' + '_update';\n    } else {\n      path = '/' + encodeURIComponent(index) + '/' + '_update' + '/' + encodeURIComponent(id);\n    } // build request object\n\n\n    const request = {\n      method,\n      path,\n      body: body || '',\n      querystring\n    };\n    options.warnings = warnings.length === 0 ? null : warnings;\n    return makeRequest(request, options, callback);\n  };\n}\n\nmodule.exports = buildUpdate;","map":null,"metadata":{},"sourceType":"script"}