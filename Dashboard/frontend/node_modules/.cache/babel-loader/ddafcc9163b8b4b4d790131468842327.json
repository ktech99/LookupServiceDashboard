{"ast":null,"code":"// Licensed to Elasticsearch B.V under one or more agreements.\n// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.\n// See the LICENSE file in the project root for more information\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nvar _objectWithoutProperties = require(\"/Users/kartik/Desktop/ls_dashboard/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nfunction buildCatIndices(opts) {\n  // eslint-disable-next-line no-unused-vars\n  const makeRequest = opts.makeRequest,\n        ConfigurationError = opts.ConfigurationError,\n        handleError = opts.handleError,\n        snakeCaseKeys = opts.snakeCaseKeys;\n  /**\n   * Perform a [cat.indices](http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html) request\n   *\n   * @param {list} index - A comma-separated list of index names to limit the returned information\n   * @param {string} format - a short version of the Accept header, e.g. json, yaml\n   * @param {enum} bytes - The unit in which to display byte values\n   * @param {boolean} local - Return local information, do not retrieve the state from master node (default: false)\n   * @param {time} master_timeout - Explicit operation timeout for connection to master node\n   * @param {list} h - Comma-separated list of column names to display\n   * @param {enum} health - A health status (\"green\", \"yellow\", or \"red\" to filter only indices matching the specified health status\n   * @param {boolean} help - Return help information\n   * @param {boolean} pri - Set to true to return stats only for primary shards\n   * @param {list} s - Comma-separated list of column names or column aliases to sort by\n   * @param {boolean} v - Verbose mode. Display column headers\n   * @param {boolean} include_unloaded_segments - If set to true segment stats will include stats for segments that are not currently loaded into memory\n   */\n\n  const acceptedQuerystring = ['format', 'bytes', 'local', 'master_timeout', 'h', 'health', 'help', 'pri', 's', 'v', 'include_unloaded_segments', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\n  const snakeCase = {\n    masterTimeout: 'master_timeout',\n    includeUnloadedSegments: 'include_unloaded_segments',\n    errorTrace: 'error_trace',\n    filterPath: 'filter_path'\n  };\n  return function catIndices(params, options, callback) {\n    options = options || {};\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof params === 'function' || params == null) {\n      callback = params;\n      params = {};\n      options = {};\n    } // check required parameters\n\n\n    if (params.body != null) {\n      const err = new ConfigurationError('This API does not require a body');\n      return handleError(err, callback);\n    } // validate headers object\n\n\n    if (options.headers != null && typeof options.headers !== 'object') {\n      const err = new ConfigurationError(\"Headers should be an object, instead got: \".concat(typeof options.headers));\n      return handleError(err, callback);\n    }\n\n    var warnings = [];\n\n    var _params = params,\n        method = _params.method,\n        body = _params.body,\n        index = _params.index,\n        querystring = _objectWithoutProperties(_params, [\"method\", \"body\", \"index\"]);\n\n    querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring, warnings);\n\n    if (method == null) {\n      method = 'GET';\n    }\n\n    var ignore = options.ignore;\n\n    if (typeof ignore === 'number') {\n      options.ignore = [ignore];\n    }\n\n    var path = '';\n\n    if (index != null) {\n      path = '/' + '_cat' + '/' + 'indices' + '/' + encodeURIComponent(index);\n    } else {\n      path = '/' + '_cat' + '/' + 'indices';\n    } // build request object\n\n\n    const request = {\n      method,\n      path,\n      body: null,\n      querystring\n    };\n    options.warnings = warnings.length === 0 ? null : warnings;\n    return makeRequest(request, options, callback);\n  };\n}\n\nmodule.exports = buildCatIndices;","map":null,"metadata":{},"sourceType":"script"}