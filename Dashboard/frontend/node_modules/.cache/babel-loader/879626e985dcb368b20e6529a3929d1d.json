{"ast":null,"code":"// Licensed to Elasticsearch B.V under one or more agreements.\n// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.\n// See the LICENSE file in the project root for more information\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nvar _objectWithoutProperties = require(\"/Users/kartik/Desktop/ls_dashboard/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nfunction buildWatcherAckWatch(opts) {\n  // eslint-disable-next-line no-unused-vars\n  const makeRequest = opts.makeRequest,\n        ConfigurationError = opts.ConfigurationError,\n        handleError = opts.handleError,\n        snakeCaseKeys = opts.snakeCaseKeys;\n  /**\n   * Perform a [watcher.ack_watch](http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html) request\n   *\n   * @param {string} watch_id - Watch ID\n   * @param {list} action_id - A comma-separated list of the action ids to be acked\n   */\n\n  const acceptedQuerystring = [];\n  const snakeCase = {};\n  return function watcherAckWatch(params, options, callback) {\n    options = options || {};\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof params === 'function' || params == null) {\n      callback = params;\n      params = {};\n      options = {};\n    } // check required parameters\n\n\n    if (params['watch_id'] == null && params['watchId'] == null) {\n      const err = new ConfigurationError('Missing required parameter: watch_id or watchId');\n      return handleError(err, callback);\n    }\n\n    if (params.body != null) {\n      const err = new ConfigurationError('This API does not require a body');\n      return handleError(err, callback);\n    } // check required url components\n\n\n    if ((params['action_id'] != null || params['actionId'] != null) && params['watch_id'] == null && params['watchId'] == null) {\n      const err = new ConfigurationError('Missing required parameter of the url: watch_id');\n      return handleError(err, callback);\n    } // validate headers object\n\n\n    if (options.headers != null && typeof options.headers !== 'object') {\n      const err = new ConfigurationError(\"Headers should be an object, instead got: \".concat(typeof options.headers));\n      return handleError(err, callback);\n    }\n\n    var warnings = [];\n\n    var _params = params,\n        method = _params.method,\n        body = _params.body,\n        watchId = _params.watchId,\n        watch_id = _params.watch_id,\n        actionId = _params.actionId,\n        action_id = _params.action_id,\n        querystring = _objectWithoutProperties(_params, [\"method\", \"body\", \"watchId\", \"watch_id\", \"actionId\", \"action_id\"]);\n\n    querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring, warnings);\n\n    if (method == null) {\n      method = 'PUT';\n    }\n\n    var ignore = options.ignore;\n\n    if (typeof ignore === 'number') {\n      options.ignore = [ignore];\n    }\n\n    var path = '';\n\n    if ((watch_id || watchId) != null && (action_id || actionId) != null) {\n      path = '/' + '_watcher' + '/' + 'watch' + '/' + encodeURIComponent(watch_id || watchId) + '/' + '_ack' + '/' + encodeURIComponent(action_id || actionId);\n    } else {\n      path = '/' + '_watcher' + '/' + 'watch' + '/' + encodeURIComponent(watch_id || watchId) + '/' + '_ack';\n    } // build request object\n\n\n    const request = {\n      method,\n      path,\n      body: '',\n      querystring\n    };\n    options.warnings = warnings.length === 0 ? null : warnings;\n    return makeRequest(request, options, callback);\n  };\n}\n\nmodule.exports = buildWatcherAckWatch;","map":null,"metadata":{},"sourceType":"script"}