{"ast":null,"code":"// Licensed to Elasticsearch B.V under one or more agreements.\n// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.\n// See the LICENSE file in the project root for more information\n'use strict';\n\nconst _require = require('querystring'),\n      stringify = _require.stringify;\n\nconst debug = require('debug')('elasticsearch');\n\nconst _require2 = require('./errors'),\n      SerializationError = _require2.SerializationError,\n      DeserializationError = _require2.DeserializationError;\n\nclass Serializer {\n  serialize(object) {\n    debug('Serializing', object);\n\n    try {\n      var json = JSON.stringify(object);\n    } catch (err) {\n      throw new SerializationError(err.message);\n    }\n\n    return json;\n  }\n\n  deserialize(json) {\n    debug('Deserializing', json);\n\n    try {\n      var object = JSON.parse(json);\n    } catch (err) {\n      throw new DeserializationError(err.message);\n    }\n\n    return object;\n  }\n\n  ndserialize(array) {\n    debug('ndserialize', array);\n\n    if (Array.isArray(array) === false) {\n      throw new SerializationError('The argument provided is not an array');\n    }\n\n    var ndjson = '';\n\n    for (var i = 0, len = array.length; i < len; i++) {\n      if (typeof array[i] === 'string') {\n        ndjson += array[i] + '\\n';\n      } else {\n        ndjson += this.serialize(array[i]) + '\\n';\n      }\n    }\n\n    return ndjson;\n  }\n\n  qserialize(object) {\n    debug('qserialize', object);\n    if (object == null) return '';\n    if (typeof object === 'string') return object; // arrays should be serialized as comma separated list\n\n    const keys = Object.keys(object);\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      var key = keys[i]; // elasticsearch will complain for keys without a value\n\n      if (object[key] === undefined) {\n        delete object[key];\n      } else if (Array.isArray(object[key]) === true) {\n        object[key] = object[key].join(',');\n      }\n    }\n\n    return stringify(object);\n  }\n\n}\n\nmodule.exports = Serializer;","map":null,"metadata":{},"sourceType":"script"}